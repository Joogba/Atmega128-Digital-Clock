
buzzle_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00000b48  00000bdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800132  00800132  00000c0e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001f9  00000000  00000000  00000c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000755  00000000  00000000  00000e27  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001f7  00000000  00000000  0000157c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000081d  00000000  00000000  00001773  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  00001f90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000215  00000000  00000000  00002140  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000617  00000000  00000000  00002355  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  0000296c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 9e 02 	jmp	0x53c	; 0x53c <__vector_14>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e4       	ldi	r30, 0x48	; 72
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 33       	cpi	r26, 0x32	; 50
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a2 e3       	ldi	r26, 0x32	; 50
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 34       	cpi	r26, 0x45	; 69
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 0a 03 	call	0x614	; 0x614 <main>
  c6:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <lcdDelay>:
	LCD_ENABLE_OFF;
	lcdDelay(5);
}

void lcdDelay(char d)
{
  ce:	df 93       	push	r29
  d0:	cf 93       	push	r28
  d2:	00 d0       	rcall	.+0      	; 0xd4 <lcdDelay+0x6>
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
  d8:	28 2f       	mov	r18, r24
  da:	0d c0       	rjmp	.+26     	; 0xf6 <lcdDelay+0x28>
	volatile di;
	while(d--)
    	for(di=0; di<2; di++);
  dc:	1a 82       	std	Y+2, r1	; 0x02
  de:	19 82       	std	Y+1, r1	; 0x01
  e0:	05 c0       	rjmp	.+10     	; 0xec <lcdDelay+0x1e>
  e2:	89 81       	ldd	r24, Y+1	; 0x01
  e4:	9a 81       	ldd	r25, Y+2	; 0x02
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	9a 83       	std	Y+2, r25	; 0x02
  ea:	89 83       	std	Y+1, r24	; 0x01
  ec:	89 81       	ldd	r24, Y+1	; 0x01
  ee:	9a 81       	ldd	r25, Y+2	; 0x02
  f0:	02 97       	sbiw	r24, 0x02	; 2
  f2:	bc f3       	brlt	.-18     	; 0xe2 <lcdDelay+0x14>
  f4:	21 50       	subi	r18, 0x01	; 1
}

void lcdDelay(char d)
{
	volatile di;
	while(d--)
  f6:	22 23       	and	r18, r18
  f8:	89 f7       	brne	.-30     	; 0xdc <lcdDelay+0xe>
    	for(di=0; di<2; di++);
}
  fa:	0f 90       	pop	r0
  fc:	0f 90       	pop	r0
  fe:	cf 91       	pop	r28
 100:	df 91       	pop	r29
 102:	08 95       	ret

00000104 <lcdRegWrite>:
	lcd_putn3(number/1000);
	lcd_putn3(number);
}

void lcdRegWrite(unsigned char reg)
{
 104:	ff 92       	push	r15
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	f8 2e       	mov	r15, r24
	LCD_R_W_OFF;
 10c:	80 91 43 01 	lds	r24, 0x0143
 110:	98 2f       	mov	r25, r24
 112:	9d 70       	andi	r25, 0x0D	; 13
 114:	01 e0       	ldi	r16, 0x01	; 1
 116:	10 e8       	ldi	r17, 0x80	; 128
 118:	f8 01       	movw	r30, r16
 11a:	90 83       	st	Z, r25
	LCD_RS_OFF;
 11c:	8c 70       	andi	r24, 0x0C	; 12
 11e:	80 93 43 01 	sts	0x0143, r24
 122:	80 83       	st	Z, r24
	lcdDelay(5);
 124:	85 e0       	ldi	r24, 0x05	; 5
 126:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
	LCD_ENABLE_ON;
 12a:	80 91 43 01 	lds	r24, 0x0143
 12e:	84 60       	ori	r24, 0x04	; 4
 130:	80 93 43 01 	sts	0x0143, r24
 134:	f8 01       	movw	r30, r16
 136:	80 83       	st	Z, r24
	LCD_DATA = reg;
 138:	f0 92 00 80 	sts	0x8000, r15
	lcdDelay(10);
 13c:	8a e0       	ldi	r24, 0x0A	; 10
 13e:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
	LCD_ENABLE_OFF;
 142:	80 91 43 01 	lds	r24, 0x0143
 146:	8b 70       	andi	r24, 0x0B	; 11
 148:	80 93 43 01 	sts	0x0143, r24
 14c:	f8 01       	movw	r30, r16
 14e:	80 83       	st	Z, r24
	lcdDelay(5);
 150:	85 e0       	ldi	r24, 0x05	; 5
 152:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
}
 156:	1f 91       	pop	r17
 158:	0f 91       	pop	r16
 15a:	ff 90       	pop	r15
 15c:	08 95       	ret

0000015e <lcd_putch>:
		lcd_putch(temp + 0x57);
	}
}

void lcd_putch(unsigned char reg)
{
 15e:	ff 92       	push	r15
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	f8 2e       	mov	r15, r24
	LCD_R_W_OFF;
 166:	80 91 43 01 	lds	r24, 0x0143
 16a:	8d 70       	andi	r24, 0x0D	; 13
 16c:	01 e0       	ldi	r16, 0x01	; 1
 16e:	10 e8       	ldi	r17, 0x80	; 128
 170:	f8 01       	movw	r30, r16
 172:	80 83       	st	Z, r24
	LCD_RS_ON;
 174:	81 60       	ori	r24, 0x01	; 1
 176:	80 93 43 01 	sts	0x0143, r24
 17a:	80 83       	st	Z, r24
	lcdDelay(5);
 17c:	85 e0       	ldi	r24, 0x05	; 5
 17e:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
	LCD_ENABLE_ON;
 182:	80 91 43 01 	lds	r24, 0x0143
 186:	84 60       	ori	r24, 0x04	; 4
 188:	80 93 43 01 	sts	0x0143, r24
 18c:	f8 01       	movw	r30, r16
 18e:	80 83       	st	Z, r24
	LCD_DATA = reg;
 190:	f0 92 00 80 	sts	0x8000, r15
	lcdDelay(10);
 194:	8a e0       	ldi	r24, 0x0A	; 10
 196:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
	LCD_ENABLE_OFF;
 19a:	80 91 43 01 	lds	r24, 0x0143
 19e:	8b 70       	andi	r24, 0x0B	; 11
 1a0:	80 93 43 01 	sts	0x0143, r24
 1a4:	f8 01       	movw	r30, r16
 1a6:	80 83       	st	Z, r24
	lcdDelay(5);
 1a8:	85 e0       	ldi	r24, 0x05	; 5
 1aa:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
}
 1ae:	1f 91       	pop	r17
 1b0:	0f 91       	pop	r16
 1b2:	ff 90       	pop	r15
 1b4:	08 95       	ret

000001b6 <lcd_putn3>:
//	lcd_putch(hex_char[number&0x0f]);
	lcd_putch((number&0x0f)+'0');
}
//-사용자- 3자리 숫자 출력 예)012
void lcd_putn3(unsigned int number)
{
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
	number%=1000;
 1ba:	68 ee       	ldi	r22, 0xE8	; 232
 1bc:	73 e0       	ldi	r23, 0x03	; 3
 1be:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__udivmodhi4>
 1c2:	18 2f       	mov	r17, r24
 1c4:	09 2f       	mov	r16, r25
	lcd_putch(number/100+'0');
 1c6:	64 e6       	ldi	r22, 0x64	; 100
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__udivmodhi4>
 1ce:	86 2f       	mov	r24, r22
 1d0:	80 5d       	subi	r24, 0xD0	; 208
 1d2:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
	number%=100;
 1d6:	81 2f       	mov	r24, r17
 1d8:	90 2f       	mov	r25, r16
 1da:	64 e6       	ldi	r22, 0x64	; 100
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__udivmodhi4>
 1e2:	18 2f       	mov	r17, r24
 1e4:	09 2f       	mov	r16, r25
	lcd_putch(number/10+'0');
 1e6:	6a e0       	ldi	r22, 0x0A	; 10
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__udivmodhi4>
 1ee:	86 2f       	mov	r24, r22
 1f0:	80 5d       	subi	r24, 0xD0	; 208
 1f2:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
	number%=10;
	lcd_putch(number+'0');
 1f6:	81 2f       	mov	r24, r17
 1f8:	90 2f       	mov	r25, r16
 1fa:	6a e0       	ldi	r22, 0x0A	; 10
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__udivmodhi4>
 202:	80 5d       	subi	r24, 0xD0	; 208
 204:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
}
 208:	1f 91       	pop	r17
 20a:	0f 91       	pop	r16
 20c:	08 95       	ret

0000020e <lcd_putn6>:
	lcd_putn2(number/1000);
	lcd_putn3(number);
}
//-사용자- 6자리 숫자 출력 예)001234
void lcd_putn6(unsigned int number)
{
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	8c 01       	movw	r16, r24
	lcd_putn3(number/1000);
 214:	68 ee       	ldi	r22, 0xE8	; 232
 216:	73 e0       	ldi	r23, 0x03	; 3
 218:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__udivmodhi4>
 21c:	cb 01       	movw	r24, r22
 21e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_putn3>
	lcd_putn3(number);
 222:	c8 01       	movw	r24, r16
 224:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_putn3>
}
 228:	1f 91       	pop	r17
 22a:	0f 91       	pop	r16
 22c:	08 95       	ret

0000022e <lcd_puth2>:
	number%=10;
	lcd_putch(number+'0');
}
unsigned char hex_char[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'}; 
void lcd_puth2(unsigned int number)
{
 22e:	0f 93       	push	r16
 230:	1f 93       	push	r17
	number%=100;
 232:	64 e6       	ldi	r22, 0x64	; 100
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__udivmodhi4>
 23a:	8c 01       	movw	r16, r24
	lcd_putch((number/16)+'0');
 23c:	24 e0       	ldi	r18, 0x04	; 4
 23e:	96 95       	lsr	r25
 240:	87 95       	ror	r24
 242:	2a 95       	dec	r18
 244:	e1 f7       	brne	.-8      	; 0x23e <lcd_puth2+0x10>
 246:	80 5d       	subi	r24, 0xD0	; 208
 248:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
//	number%=10;
//	lcd_putch(hex_char[number&0x0f]);
	lcd_putch((number&0x0f)+'0');
 24c:	0f 70       	andi	r16, 0x0F	; 15
 24e:	80 2f       	mov	r24, r16
 250:	80 5d       	subi	r24, 0xD0	; 208
 252:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
}
 256:	1f 91       	pop	r17
 258:	0f 91       	pop	r16
 25a:	08 95       	ret

0000025c <lcd_putn2>:
{
	number%=10;
	lcd_putch(number+'0');
}
void lcd_putn2(unsigned int number)
{
 25c:	0f 93       	push	r16
 25e:	1f 93       	push	r17
	number%=100;
 260:	64 e6       	ldi	r22, 0x64	; 100
 262:	70 e0       	ldi	r23, 0x00	; 0
 264:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__udivmodhi4>
 268:	18 2f       	mov	r17, r24
 26a:	09 2f       	mov	r16, r25
	lcd_putch(number/10+'0');
 26c:	6a e0       	ldi	r22, 0x0A	; 10
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__udivmodhi4>
 274:	86 2f       	mov	r24, r22
 276:	80 5d       	subi	r24, 0xD0	; 208
 278:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
	number%=10;
	lcd_putch(number+'0');
 27c:	81 2f       	mov	r24, r17
 27e:	90 2f       	mov	r25, r16
 280:	6a e0       	ldi	r22, 0x0A	; 10
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__udivmodhi4>
 288:	80 5d       	subi	r24, 0xD0	; 208
 28a:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
}
 28e:	1f 91       	pop	r17
 290:	0f 91       	pop	r16
 292:	08 95       	ret

00000294 <lcd_putn5>:
{
	lcd_putn1(number/1000);
	lcd_putn3(number);
}
void lcd_putn5(unsigned int number)
{
 294:	0f 93       	push	r16
 296:	1f 93       	push	r17
 298:	8c 01       	movw	r16, r24
	lcd_putn2(number/1000);
 29a:	68 ee       	ldi	r22, 0xE8	; 232
 29c:	73 e0       	ldi	r23, 0x03	; 3
 29e:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__udivmodhi4>
 2a2:	cb 01       	movw	r24, r22
 2a4:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_putn2>
	lcd_putn3(number);
 2a8:	c8 01       	movw	r24, r16
 2aa:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_putn3>
}
 2ae:	1f 91       	pop	r17
 2b0:	0f 91       	pop	r16
 2b2:	08 95       	ret

000002b4 <lcd_putn1>:
}

void lcd_putn1(unsigned int number)
{
	number%=10;
	lcd_putch(number+'0');
 2b4:	6a e0       	ldi	r22, 0x0A	; 10
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__udivmodhi4>
 2bc:	80 5d       	subi	r24, 0xD0	; 208
 2be:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
}
 2c2:	08 95       	ret

000002c4 <lcd_putn4>:
	lcd_putch(number/10+'0');
	number%=10;
	lcd_putch(number+'0');
}
void lcd_putn4(unsigned int number)
{
 2c4:	0f 93       	push	r16
 2c6:	1f 93       	push	r17
 2c8:	8c 01       	movw	r16, r24
	lcd_putn1(number/1000);
 2ca:	68 ee       	ldi	r22, 0xE8	; 232
 2cc:	73 e0       	ldi	r23, 0x03	; 3
 2ce:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__udivmodhi4>
 2d2:	cb 01       	movw	r24, r22
 2d4:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_putn1>
	lcd_putn3(number);
 2d8:	c8 01       	movw	r24, r16
 2da:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_putn3>
}
 2de:	1f 91       	pop	r17
 2e0:	0f 91       	pop	r16
 2e2:	08 95       	ret

000002e4 <putcharHex>:
		lcd_putch( reg + 0x30 );
	}
}

void putcharHex(unsigned char reg)
{
 2e4:	1f 93       	push	r17
 2e6:	18 2f       	mov	r17, r24
	unsigned char temp;
	
	temp = reg;
	temp>>=4;
 2e8:	82 95       	swap	r24
 2ea:	8f 70       	andi	r24, 0x0F	; 15
	if(temp<10){
 2ec:	8a 30       	cpi	r24, 0x0A	; 10
 2ee:	10 f4       	brcc	.+4      	; 0x2f4 <putcharHex+0x10>
		lcd_putch(temp + 0x30);
 2f0:	80 5d       	subi	r24, 0xD0	; 208
 2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <putcharHex+0x12>
	}else{
		lcd_putch(temp + 0x57);
 2f4:	89 5a       	subi	r24, 0xA9	; 169
 2f6:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
	}

	temp = reg & 0x0f;
 2fa:	81 2f       	mov	r24, r17
 2fc:	8f 70       	andi	r24, 0x0F	; 15
	if(temp<10){
 2fe:	8a 30       	cpi	r24, 0x0A	; 10
 300:	10 f4       	brcc	.+4      	; 0x306 <putcharHex+0x22>
		lcd_putch(temp + 0x30);
 302:	80 5d       	subi	r24, 0xD0	; 208
 304:	01 c0       	rjmp	.+2      	; 0x308 <putcharHex+0x24>
	}else{
		lcd_putch(temp + 0x57);
 306:	89 5a       	subi	r24, 0xA9	; 169
 308:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
	}
}
 30c:	1f 91       	pop	r17
 30e:	08 95       	ret

00000310 <putcharInt>:
	lcdRegWrite(0x01);
	lcdDelay(500);
}

void putcharInt(unsigned char reg)
{
 310:	ff 92       	push	r15
 312:	0f 93       	push	r16
 314:	1f 93       	push	r17
 316:	08 2f       	mov	r16, r24
	unsigned char temp;
	
	if(reg>99){
 318:	84 36       	cpi	r24, 0x64	; 100
 31a:	f0 f0       	brcs	.+60     	; 0x358 <putcharInt+0x48>
		temp = reg / 100;
 31c:	64 e6       	ldi	r22, 0x64	; 100
 31e:	0e 94 32 05 	call	0xa64	; 0xa64 <__udivmodqi4>
 322:	18 2f       	mov	r17, r24
		lcd_putch( temp + 0x30 );
 324:	80 5d       	subi	r24, 0xD0	; 208
 326:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
		reg = reg - temp*100;
 32a:	8c e9       	ldi	r24, 0x9C	; 156
 32c:	9f ef       	ldi	r25, 0xFF	; 255
 32e:	18 9f       	mul	r17, r24
 330:	10 2d       	mov	r17, r0
 332:	11 24       	eor	r1, r1
 334:	10 0f       	add	r17, r16
		temp = reg / 10;
 336:	81 2f       	mov	r24, r17
 338:	6a e0       	ldi	r22, 0x0A	; 10
 33a:	0e 94 32 05 	call	0xa64	; 0xa64 <__udivmodqi4>
 33e:	08 2f       	mov	r16, r24
		lcd_putch( temp + 0x30 );
 340:	80 5d       	subi	r24, 0xD0	; 208
 342:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
		reg = reg - temp*10;
		lcd_putch( reg + 0x30 );
 346:	10 5d       	subi	r17, 0xD0	; 208
 348:	86 ef       	ldi	r24, 0xF6	; 246
 34a:	9f ef       	ldi	r25, 0xFF	; 255
 34c:	08 9f       	mul	r16, r24
 34e:	00 2d       	mov	r16, r0
 350:	11 24       	eor	r1, r1
 352:	80 2f       	mov	r24, r16
 354:	81 0f       	add	r24, r17
 356:	1f c0       	rjmp	.+62     	; 0x396 <putcharInt+0x86>
 358:	30 e3       	ldi	r19, 0x30	; 48
 35a:	f3 2e       	mov	r15, r19
 35c:	f8 0e       	add	r15, r24
	}else if(reg>9){
 35e:	8a 30       	cpi	r24, 0x0A	; 10
 360:	98 f0       	brcs	.+38     	; 0x388 <putcharInt+0x78>
		lcd_putch(' ');
 362:	80 e2       	ldi	r24, 0x20	; 32
 364:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
		temp = reg / 10;
 368:	80 2f       	mov	r24, r16
 36a:	6a e0       	ldi	r22, 0x0A	; 10
 36c:	0e 94 32 05 	call	0xa64	; 0xa64 <__udivmodqi4>
 370:	18 2f       	mov	r17, r24
		lcd_putch( temp + 0x30 );
 372:	80 5d       	subi	r24, 0xD0	; 208
 374:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
		reg = reg - temp*10;
		lcd_putch( reg + 0x30 );
 378:	86 ef       	ldi	r24, 0xF6	; 246
 37a:	9f ef       	ldi	r25, 0xFF	; 255
 37c:	18 9f       	mul	r17, r24
 37e:	10 2d       	mov	r17, r0
 380:	11 24       	eor	r1, r1
 382:	81 2f       	mov	r24, r17
 384:	8f 0d       	add	r24, r15
 386:	07 c0       	rjmp	.+14     	; 0x396 <putcharInt+0x86>
	}else{
		lcd_putch(' ');
 388:	80 e2       	ldi	r24, 0x20	; 32
 38a:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
		lcd_putch(' ');
 38e:	80 e2       	ldi	r24, 0x20	; 32
 390:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
		lcd_putch( reg + 0x30 );
 394:	8f 2d       	mov	r24, r15
 396:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
	}
}
 39a:	1f 91       	pop	r17
 39c:	0f 91       	pop	r16
 39e:	ff 90       	pop	r15
 3a0:	08 95       	ret

000003a2 <lcd_putss>:
		s++;
	}
}

void lcd_putss(char *s)
{
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	ec 01       	movw	r28, r24
 3a8:	03 c0       	rjmp	.+6      	; 0x3b0 <lcd_putss+0xe>
	while(*s)
	{
        lcd_putch(*s);
 3aa:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
		s++;
 3ae:	21 96       	adiw	r28, 0x01	; 1
	}
}

void lcd_putss(char *s)
{
	while(*s)
 3b0:	88 81       	ld	r24, Y
 3b2:	88 23       	and	r24, r24
 3b4:	d1 f7       	brne	.-12     	; 0x3aa <lcd_putss+0x8>
	{
        lcd_putch(*s);
		s++;
	}
}
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	08 95       	ret

000003bc <lcdClear>:
    lcdClear();
}

void lcdClear(void)
{
	lcdRegWrite(0x01);
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 82 00 	call	0x104	; 0x104 <lcdRegWrite>
	lcdDelay(500);
 3c2:	84 ef       	ldi	r24, 0xF4	; 244
 3c4:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
}
 3c8:	08 95       	ret

000003ca <lcdInit>:
		
	}
}

void lcdInit(void)
{
 3ca:	df 93       	push	r29
 3cc:	cf 93       	push	r28
 3ce:	00 d0       	rcall	.+0      	; 0x3d0 <lcdInit+0x6>
 3d0:	00 d0       	rcall	.+0      	; 0x3d2 <lcdInit+0x8>
 3d2:	00 d0       	rcall	.+0      	; 0x3d4 <lcdInit+0xa>
 3d4:	cd b7       	in	r28, 0x3d	; 61
 3d6:	de b7       	in	r29, 0x3e	; 62
	unsigned char i, lcd_reg[6]={0x38, 0x0c, 0x06};
 3d8:	96 e0       	ldi	r25, 0x06	; 6
 3da:	fe 01       	movw	r30, r28
 3dc:	31 96       	adiw	r30, 0x01	; 1
 3de:	df 01       	movw	r26, r30
 3e0:	89 2f       	mov	r24, r25
 3e2:	1d 92       	st	X+, r1
 3e4:	8a 95       	dec	r24
 3e6:	e9 f7       	brne	.-6      	; 0x3e2 <lcdInit+0x18>
 3e8:	88 e3       	ldi	r24, 0x38	; 56
 3ea:	89 83       	std	Y+1, r24	; 0x01
 3ec:	8c e0       	ldi	r24, 0x0C	; 12
 3ee:	8a 83       	std	Y+2, r24	; 0x02
 3f0:	9b 83       	std	Y+3, r25	; 0x03
	LCD_ENABLE_OFF;
 3f2:	80 91 43 01 	lds	r24, 0x0143
 3f6:	8b 70       	andi	r24, 0x0B	; 11
 3f8:	e1 e0       	ldi	r30, 0x01	; 1
 3fa:	f0 e8       	ldi	r31, 0x80	; 128
 3fc:	80 83       	st	Z, r24
	LCD_R_W_ON;
 3fe:	98 2f       	mov	r25, r24
 400:	92 60       	ori	r25, 0x02	; 2
 402:	90 83       	st	Z, r25
	LCD_RS_ON;
 404:	83 60       	ori	r24, 0x03	; 3
 406:	80 93 43 01 	sts	0x0143, r24
 40a:	80 83       	st	Z, r24


	lcdDelay(200);
 40c:	88 ec       	ldi	r24, 0xC8	; 200
 40e:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
	for(i=0; i<3; i++){
		lcdRegWrite(lcd_reg[i]);
 412:	89 81       	ldd	r24, Y+1	; 0x01
 414:	0e 94 82 00 	call	0x104	; 0x104 <lcdRegWrite>
 418:	8a 81       	ldd	r24, Y+2	; 0x02
 41a:	0e 94 82 00 	call	0x104	; 0x104 <lcdRegWrite>
 41e:	86 e0       	ldi	r24, 0x06	; 6
 420:	0e 94 82 00 	call	0x104	; 0x104 <lcdRegWrite>
		//lcdDelay(200);
	}
    lcdClear();
 424:	0e 94 de 01 	call	0x3bc	; 0x3bc <lcdClear>
}
 428:	26 96       	adiw	r28, 0x06	; 6
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	f8 94       	cli
 42e:	de bf       	out	0x3e, r29	; 62
 430:	0f be       	out	0x3f, r0	; 63
 432:	cd bf       	out	0x3d, r28	; 61
 434:	cf 91       	pop	r28
 436:	df 91       	pop	r29
 438:	08 95       	ret

0000043a <lcd_gotoxy>:
// |
// |
// v Y
void lcd_gotoxy(unsigned char x, unsigned char y)
{
	switch(y)
 43a:	61 30       	cpi	r22, 0x01	; 1
 43c:	19 f0       	breq	.+6      	; 0x444 <lcd_gotoxy+0xa>
 43e:	62 30       	cpi	r22, 0x02	; 2
 440:	71 f4       	brne	.+28     	; 0x45e <lcd_gotoxy+0x24>
 442:	07 c0       	rjmp	.+14     	; 0x452 <lcd_gotoxy+0x18>
	{
		case 1:
		{
			lcdRegWrite(0x80+x-1);
 444:	81 58       	subi	r24, 0x81	; 129
 446:	0e 94 82 00 	call	0x104	; 0x104 <lcdRegWrite>
			lcdDelay(30);
 44a:	8e e1       	ldi	r24, 0x1E	; 30
 44c:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
 450:	08 95       	ret
			break; 
		}
		case 2 :
		{
			lcdRegWrite(0xc0+x-1);
 452:	81 54       	subi	r24, 0x41	; 65
 454:	0e 94 82 00 	call	0x104	; 0x104 <lcdRegWrite>
			lcdDelay(30);
 458:	8e e1       	ldi	r24, 0x1E	; 30
 45a:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
 45e:	08 95       	ret

00000460 <lcd_puts>:
void lcd_gotoxy(unsigned char x, unsigned char y);

unsigned char lcd_curser=0, lcd_line=0;

void lcd_puts(char lcd_l, char *s)
{
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
 464:	98 2f       	mov	r25, r24
 466:	eb 01       	movw	r28, r22
   	lcd_gotoxy(1,lcd_l);
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	69 2f       	mov	r22, r25
 46c:	0e 94 1d 02 	call	0x43a	; 0x43a <lcd_gotoxy>
 470:	03 c0       	rjmp	.+6      	; 0x478 <lcd_puts+0x18>
	while(*s)
	{
        lcd_putch(*s);
 472:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
		s++;
 476:	21 96       	adiw	r28, 0x01	; 1
unsigned char lcd_curser=0, lcd_line=0;

void lcd_puts(char lcd_l, char *s)
{
   	lcd_gotoxy(1,lcd_l);
	while(*s)
 478:	88 81       	ld	r24, Y
 47a:	88 23       	and	r24, r24
 47c:	d1 f7       	brne	.-12     	; 0x472 <lcd_puts+0x12>
	{
        lcd_putch(*s);
		s++;
	}
}
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	08 95       	ret

00000484 <secondRow>:
	}
}


void secondRow(void)
{
 484:	1f 93       	push	r17
 486:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char i;
	for(i=0; i<24; i++){
		lcd_putch(0);
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
		lcdDelay(30);
 48e:	8e e1       	ldi	r24, 0x1E	; 30
 490:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>


void secondRow(void)
{
	unsigned char i;
	for(i=0; i<24; i++){
 494:	1f 5f       	subi	r17, 0xFF	; 255
 496:	18 31       	cpi	r17, 0x18	; 24
 498:	b9 f7       	brne	.-18     	; 0x488 <secondRow+0x4>
		lcd_putch(0);
		lcdDelay(30);
	}
}
 49a:	1f 91       	pop	r17
 49c:	08 95       	ret

0000049e <putString>:


void putString(char str[])
{
 49e:	ef 92       	push	r14
 4a0:	ff 92       	push	r15
 4a2:	1f 93       	push	r17
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	7c 01       	movw	r14, r24
 4aa:	10 e0       	ldi	r17, 0x00	; 0
 4ac:	0b c0       	rjmp	.+22     	; 0x4c4 <putString+0x26>
	unsigned char i=0;
	while(str[i]){
		if(i==16){
 4ae:	10 31       	cpi	r17, 0x10	; 16
 4b0:	11 f4       	brne	.+4      	; 0x4b6 <putString+0x18>
			secondRow();
 4b2:	0e 94 42 02 	call	0x484	; 0x484 <secondRow>
		}
		lcd_putch(str[i]);
 4b6:	88 81       	ld	r24, Y
 4b8:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
		lcdDelay(30);
 4bc:	8e e1       	ldi	r24, 0x1E	; 30
 4be:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
		i++;
 4c2:	1f 5f       	subi	r17, 0xFF	; 255


void putString(char str[])
{
	unsigned char i=0;
	while(str[i]){
 4c4:	e7 01       	movw	r28, r14
 4c6:	c1 0f       	add	r28, r17
 4c8:	d1 1d       	adc	r29, r1
 4ca:	88 81       	ld	r24, Y
 4cc:	88 23       	and	r24, r24
 4ce:	79 f7       	brne	.-34     	; 0x4ae <putString+0x10>
		}
		lcd_putch(str[i]);
		lcdDelay(30);
		i++;
	}
}
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	1f 91       	pop	r17
 4d6:	ff 90       	pop	r15
 4d8:	ef 90       	pop	r14
 4da:	08 95       	ret

000004dc <lcdDelayLong>:
{
	unsigned char i, j, k;
	for(i=0; i<80; i++)
		for(j=0; j<50; j++)
			for(k=0; k<d; k++);
 4dc:	08 95       	ret

000004de <port_init>:

unsigned char keydata, key_old;

void port_init(void)
{
	 PORTA = 0x00;
 4de:	1b ba       	out	0x1b, r1	; 27
	 DDRA  = 0xff;
 4e0:	8f ef       	ldi	r24, 0xFF	; 255
 4e2:	8a bb       	out	0x1a, r24	; 26
	 PORTB = 0x00;
 4e4:	18 ba       	out	0x18, r1	; 24
	 DDRB  = 0x00;
 4e6:	17 ba       	out	0x17, r1	; 23
	 PORTC = 0x00; //m103 output only
 4e8:	15 ba       	out	0x15, r1	; 21
	 DDRC  = 0x00;
 4ea:	14 ba       	out	0x14, r1	; 20
	 PORTD = 0x00;
 4ec:	12 ba       	out	0x12, r1	; 18
	 DDRD  = 0x00;
 4ee:	11 ba       	out	0x11, r1	; 17
	 PORTE = 0x00;
 4f0:	13 b8       	out	0x03, r1	; 3
	 DDRE  = 0x00;
 4f2:	12 b8       	out	0x02, r1	; 2
	 PORTF = 0x00;
 4f4:	10 92 62 00 	sts	0x0062, r1
	 DDRF  = 0x00;
 4f8:	10 92 61 00 	sts	0x0061, r1
	 PORTG = 0x00;
 4fc:	10 92 65 00 	sts	0x0065, r1
	 DDRG  = 0x1f;  // buzzle --> PORTG4
 500:	8f e1       	ldi	r24, 0x1F	; 31
 502:	80 93 64 00 	sts	0x0064, r24
}
 506:	08 95       	ret

00000508 <timer1_init>:

//TIMER1 initialize - prescale:8

void timer1_init(void)
{
	 TCCR1B = 0x00; //stop
 508:	1e bc       	out	0x2e, r1	; 46
	 TCNT1H = 0x00; //setup
 50a:	1d bc       	out	0x2d, r1	; 45
	 TCNT1L = 0x00;
 50c:	1c bc       	out	0x2c, r1	; 44
	 TCCR1A = 0x00;
 50e:	1f bc       	out	0x2f, r1	; 47
	 TCCR1B = 0x02; //Normal mode, prescale = 8 start Timer
 510:	82 e0       	ldi	r24, 0x02	; 2
 512:	8e bd       	out	0x2e, r24	; 46
}
 514:	08 95       	ret

00000516 <init_devices>:


void init_devices(void)
{
	 //stop errant interrupts until set up
	 CLI(); //disable all interrupts
 516:	f8 94       	cli
	 port_init();
 518:	0e 94 6f 02 	call	0x4de	; 0x4de <port_init>
	 lcdInit();
 51c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <lcdInit>
	 lcdClear();
 520:	0e 94 de 01 	call	0x3bc	; 0x3bc <lcdClear>

//TIMER1 initialize - prescale:8

void timer1_init(void)
{
	 TCCR1B = 0x00; //stop
 524:	1e bc       	out	0x2e, r1	; 46
	 TCNT1H = 0x00; //setup
 526:	1d bc       	out	0x2d, r1	; 45
	 TCNT1L = 0x00;
 528:	1c bc       	out	0x2c, r1	; 44
	 TCCR1A = 0x00;
 52a:	1f bc       	out	0x2f, r1	; 47
	 TCCR1B = 0x02; //Normal mode, prescale = 8 start Timer
 52c:	82 e0       	ldi	r24, 0x02	; 2
 52e:	8e bd       	out	0x2e, r24	; 46
	 CLI(); //disable all interrupts
	 port_init();
	 lcdInit();
	 lcdClear();
	 timer1_init();
	 MCUCR = 0x80;
 530:	80 e8       	ldi	r24, 0x80	; 128
 532:	85 bf       	out	0x35, r24	; 53
	 TIMSK = 0x04; //timer1 interrupt sources
 534:	84 e0       	ldi	r24, 0x04	; 4
 536:	87 bf       	out	0x37, r24	; 55
	 SEI(); //re-enable interrupts
 538:	78 94       	sei
	 
}
 53a:	08 95       	ret

0000053c <__vector_14>:



ISR(TIMER1_OVF_vect)
{	
 53c:	1f 92       	push	r1
 53e:	0f 92       	push	r0
 540:	0f b6       	in	r0, 0x3f	; 63
 542:	0f 92       	push	r0
 544:	0b b6       	in	r0, 0x3b	; 59
 546:	0f 92       	push	r0
 548:	11 24       	eor	r1, r1
 54a:	8f 93       	push	r24
 54c:	9f 93       	push	r25
 54e:	af 93       	push	r26
 550:	bf 93       	push	r27
 552:	ef 93       	push	r30
 554:	ff 93       	push	r31
	TCNT1 = TCNT;
 556:	80 91 3b 01 	lds	r24, 0x013B
 55a:	90 91 3c 01 	lds	r25, 0x013C
 55e:	a0 91 3d 01 	lds	r26, 0x013D
 562:	b0 91 3e 01 	lds	r27, 0x013E
 566:	9d bd       	out	0x2d, r25	; 45
 568:	8c bd       	out	0x2c, r24	; 44
	PORTG = PORTG ^ 0x10;
 56a:	e5 e6       	ldi	r30, 0x65	; 101
 56c:	f0 e0       	ldi	r31, 0x00	; 0
 56e:	80 81       	ld	r24, Z
 570:	90 e1       	ldi	r25, 0x10	; 16
 572:	89 27       	eor	r24, r25
 574:	80 83       	st	Z, r24
}
 576:	ff 91       	pop	r31
 578:	ef 91       	pop	r30
 57a:	bf 91       	pop	r27
 57c:	af 91       	pop	r26
 57e:	9f 91       	pop	r25
 580:	8f 91       	pop	r24
 582:	0f 90       	pop	r0
 584:	0b be       	out	0x3b, r0	; 59
 586:	0f 90       	pop	r0
 588:	0f be       	out	0x3f, r0	; 63
 58a:	0f 90       	pop	r0
 58c:	1f 90       	pop	r1
 58e:	18 95       	reti

00000590 <sound>:

void sound(int freq)
{	//T1HIGHCNT = (0xFFFF-floor(1000000/freq))/0x100;
 590:	0f 93       	push	r16
 592:	1f 93       	push	r17
 594:	8c 01       	movw	r16, r24
	//T1LOWCNT = 0xFF00 - (0xFFFF-floor(1000000/freq) );
	TCNT = (0xFFFF-floor(1000000/(freq/2)));
 596:	62 e0       	ldi	r22, 0x02	; 2
 598:	70 e0       	ldi	r23, 0x00	; 0
 59a:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__divmodhi4>
 59e:	9b 01       	movw	r18, r22
 5a0:	44 27       	eor	r20, r20
 5a2:	37 fd       	sbrc	r19, 7
 5a4:	40 95       	com	r20
 5a6:	54 2f       	mov	r21, r20
 5a8:	60 e4       	ldi	r22, 0x40	; 64
 5aa:	72 e4       	ldi	r23, 0x42	; 66
 5ac:	8f e0       	ldi	r24, 0x0F	; 15
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	0e 94 65 05 	call	0xaca	; 0xaca <__divmodsi4>
 5b4:	ca 01       	movw	r24, r20
 5b6:	b9 01       	movw	r22, r18
 5b8:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__floatsisf>
 5bc:	0e 94 8e 04 	call	0x91c	; 0x91c <floor>
 5c0:	9b 01       	movw	r18, r22
 5c2:	ac 01       	movw	r20, r24
 5c4:	60 e0       	ldi	r22, 0x00	; 0
 5c6:	7f ef       	ldi	r23, 0xFF	; 255
 5c8:	8f e7       	ldi	r24, 0x7F	; 127
 5ca:	97 e4       	ldi	r25, 0x47	; 71
 5cc:	0e 94 bb 03 	call	0x776	; 0x776 <__subsf3>
 5d0:	0e 94 20 04 	call	0x840	; 0x840 <__fixsfsi>
 5d4:	60 93 3b 01 	sts	0x013B, r22
 5d8:	70 93 3c 01 	sts	0x013C, r23
 5dc:	80 93 3d 01 	sts	0x013D, r24
 5e0:	90 93 3e 01 	sts	0x013E, r25
	 lcd_gotoxy(5,2);
 5e4:	85 e0       	ldi	r24, 0x05	; 5
 5e6:	62 e0       	ldi	r22, 0x02	; 2
 5e8:	0e 94 1d 02 	call	0x43a	; 0x43a <lcd_gotoxy>
	 lcd_putn3(TCNT);
 5ec:	80 91 3b 01 	lds	r24, 0x013B
 5f0:	90 91 3c 01 	lds	r25, 0x013C
 5f4:	a0 91 3d 01 	lds	r26, 0x013D
 5f8:	b0 91 3e 01 	lds	r27, 0x013E
 5fc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_putn3>
	 lcd_gotoxy(11,2);
 600:	8b e0       	ldi	r24, 0x0B	; 11
 602:	62 e0       	ldi	r22, 0x02	; 2
 604:	0e 94 1d 02 	call	0x43a	; 0x43a <lcd_gotoxy>
	 lcd_putn3(freq);
 608:	c8 01       	movw	r24, r16
 60a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_putn3>
}
 60e:	1f 91       	pop	r17
 610:	0f 91       	pop	r16
 612:	08 95       	ret

00000614 <main>:



int main( void ) 
{
 614:	0f 93       	push	r16
 616:	1f 93       	push	r17
 618:	cf 93       	push	r28
 61a:	df 93       	push	r29
	
	 MCUCR = 0x80;
 61c:	80 e8       	ldi	r24, 0x80	; 128
 61e:	85 bf       	out	0x35, r24	; 53
	 port_init();
 620:	0e 94 6f 02 	call	0x4de	; 0x4de <port_init>
	 init_devices();
 624:	0e 94 8b 02 	call	0x516	; 0x516 <init_devices>
	lcdClear();
 628:	0e 94 de 01 	call	0x3bc	; 0x3bc <lcdClear>
 62c:	88 e8       	ldi	r24, 0x88	; 136
 62e:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 630:	28 e2       	ldi	r18, 0x28	; 40
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	f9 01       	movw	r30, r18
 636:	31 97       	sbiw	r30, 0x01	; 1
 638:	f1 f7       	brne	.-4      	; 0x636 <main+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 63a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 63c:	d9 f7       	brne	.-10     	; 0x634 <main+0x20>
	_delay_ms(500);
	
	 lcd_puts(1,"buzzle test");	
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	60 e0       	ldi	r22, 0x00	; 0
 642:	71 e0       	ldi	r23, 0x01	; 1
 644:	0e 94 30 02 	call	0x460	; 0x460 <lcd_puts>
 648:	88 e8       	ldi	r24, 0x88	; 136
 64a:	93 e1       	ldi	r25, 0x13	; 19
 64c:	28 e2       	ldi	r18, 0x28	; 40
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	f9 01       	movw	r30, r18
 652:	31 97       	sbiw	r30, 0x01	; 1
 654:	f1 f7       	brne	.-4      	; 0x652 <main+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 656:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 658:	d9 f7       	brne	.-10     	; 0x650 <main+0x3c>
 65a:	c8 e2       	ldi	r28, 0x28	; 40
 65c:	d0 e0       	ldi	r29, 0x00	; 0
	 _delay_ms(500);
	
	while(1) 
	 {
		keydata = PINB & 0xff;
 65e:	00 e9       	ldi	r16, 0x90	; 144
 660:	11 e0       	ldi	r17, 0x01	; 1
 662:	86 b3       	in	r24, 0x16	; 22
		if (keydata)
 664:	88 23       	and	r24, r24
 666:	e9 f3       	breq	.-6      	; 0x662 <main+0x4e>
 668:	80 93 44 01 	sts	0x0144, r24
		{
			switch(keydata)
 66c:	88 30       	cpi	r24, 0x08	; 8
 66e:	09 f4       	brne	.+2      	; 0x672 <main+0x5e>
 670:	4c c0       	rjmp	.+152    	; 0x70a <main+0xf6>
 672:	89 30       	cpi	r24, 0x09	; 9
 674:	58 f4       	brcc	.+22     	; 0x68c <main+0x78>
 676:	81 30       	cpi	r24, 0x01	; 1
 678:	c9 f0       	breq	.+50     	; 0x6ac <main+0x98>
 67a:	81 30       	cpi	r24, 0x01	; 1
 67c:	08 f4       	brcc	.+2      	; 0x680 <main+0x6c>
 67e:	71 c0       	rjmp	.+226    	; 0x762 <main+0x14e>
 680:	82 30       	cpi	r24, 0x02	; 2
 682:	09 f1       	breq	.+66     	; 0x6c6 <main+0xb2>
 684:	84 30       	cpi	r24, 0x04	; 4
 686:	09 f0       	breq	.+2      	; 0x68a <main+0x76>
 688:	6c c0       	rjmp	.+216    	; 0x762 <main+0x14e>
 68a:	2e c0       	rjmp	.+92     	; 0x6e8 <main+0xd4>
 68c:	80 32       	cpi	r24, 0x20	; 32
 68e:	09 f4       	brne	.+2      	; 0x692 <main+0x7e>
 690:	55 c0       	rjmp	.+170    	; 0x73c <main+0x128>
 692:	81 32       	cpi	r24, 0x21	; 33
 694:	20 f4       	brcc	.+8      	; 0x69e <main+0x8a>
 696:	80 31       	cpi	r24, 0x10	; 16
 698:	09 f0       	breq	.+2      	; 0x69c <main+0x88>
 69a:	63 c0       	rjmp	.+198    	; 0x762 <main+0x14e>
 69c:	47 c0       	rjmp	.+142    	; 0x72c <main+0x118>
 69e:	80 34       	cpi	r24, 0x40	; 64
 6a0:	09 f4       	brne	.+2      	; 0x6a4 <main+0x90>
 6a2:	54 c0       	rjmp	.+168    	; 0x74c <main+0x138>
 6a4:	80 38       	cpi	r24, 0x80	; 128
 6a6:	09 f0       	breq	.+2      	; 0x6aa <main+0x96>
 6a8:	5c c0       	rjmp	.+184    	; 0x762 <main+0x14e>
 6aa:	58 c0       	rjmp	.+176    	; 0x75c <main+0x148>
			{
			case 0x01:
				sound(523);
 6ac:	8b e0       	ldi	r24, 0x0B	; 11
 6ae:	92 e0       	ldi	r25, 0x02	; 2
 6b0:	0e 94 c8 02 	call	0x590	; 0x590 <sound>
				lcd_puts(2,"DO");	
 6b4:	82 e0       	ldi	r24, 0x02	; 2
 6b6:	6c e0       	ldi	r22, 0x0C	; 12
 6b8:	71 e0       	ldi	r23, 0x01	; 1
 6ba:	0e 94 30 02 	call	0x460	; 0x460 <lcd_puts>
 6be:	c8 01       	movw	r24, r16
 6c0:	01 97       	sbiw	r24, 0x01	; 1
 6c2:	f1 f7       	brne	.-4      	; 0x6c0 <main+0xac>
 6c4:	ce cf       	rjmp	.-100    	; 0x662 <main+0x4e>
				_delay_ms(1);
				break;
			case 0x02:
				sound(587);
 6c6:	8b e4       	ldi	r24, 0x4B	; 75
 6c8:	92 e0       	ldi	r25, 0x02	; 2
 6ca:	0e 94 c8 02 	call	0x590	; 0x590 <sound>
				lcd_puts(2,"RE");	
 6ce:	82 e0       	ldi	r24, 0x02	; 2
 6d0:	6f e0       	ldi	r22, 0x0F	; 15
 6d2:	71 e0       	ldi	r23, 0x01	; 1
 6d4:	0e 94 30 02 	call	0x460	; 0x460 <lcd_puts>
 6d8:	80 ea       	ldi	r24, 0xA0	; 160
 6da:	9f e0       	ldi	r25, 0x0F	; 15
 6dc:	fe 01       	movw	r30, r28
 6de:	31 97       	sbiw	r30, 0x01	; 1
 6e0:	f1 f7       	brne	.-4      	; 0x6de <main+0xca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6e2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6e4:	d9 f7       	brne	.-10     	; 0x6dc <main+0xc8>
 6e6:	bd cf       	rjmp	.-134    	; 0x662 <main+0x4e>
				_delay_ms(400);
				break;
			case 0x04:
				sound(659);
 6e8:	83 e9       	ldi	r24, 0x93	; 147
 6ea:	92 e0       	ldi	r25, 0x02	; 2
 6ec:	0e 94 c8 02 	call	0x590	; 0x590 <sound>
				lcd_puts(2,"MI");
 6f0:	82 e0       	ldi	r24, 0x02	; 2
 6f2:	62 e1       	ldi	r22, 0x12	; 18
 6f4:	71 e0       	ldi	r23, 0x01	; 1
 6f6:	0e 94 30 02 	call	0x460	; 0x460 <lcd_puts>
 6fa:	80 ea       	ldi	r24, 0xA0	; 160
 6fc:	9f e0       	ldi	r25, 0x0F	; 15
 6fe:	fe 01       	movw	r30, r28
 700:	31 97       	sbiw	r30, 0x01	; 1
 702:	f1 f7       	brne	.-4      	; 0x700 <main+0xec>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 704:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 706:	d9 f7       	brne	.-10     	; 0x6fe <main+0xea>
 708:	ac cf       	rjmp	.-168    	; 0x662 <main+0x4e>
				_delay_ms(400);
				break;				
			case 0x08:
				sound(699);
 70a:	8b eb       	ldi	r24, 0xBB	; 187
 70c:	92 e0       	ldi	r25, 0x02	; 2
 70e:	0e 94 c8 02 	call	0x590	; 0x590 <sound>
				lcd_puts(2,"PA");
 712:	82 e0       	ldi	r24, 0x02	; 2
 714:	65 e1       	ldi	r22, 0x15	; 21
 716:	71 e0       	ldi	r23, 0x01	; 1
 718:	0e 94 30 02 	call	0x460	; 0x460 <lcd_puts>
 71c:	80 ea       	ldi	r24, 0xA0	; 160
 71e:	9f e0       	ldi	r25, 0x0F	; 15
 720:	fe 01       	movw	r30, r28
 722:	31 97       	sbiw	r30, 0x01	; 1
 724:	f1 f7       	brne	.-4      	; 0x722 <main+0x10e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 726:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 728:	d9 f7       	brne	.-10     	; 0x720 <main+0x10c>
 72a:	9b cf       	rjmp	.-202    	; 0x662 <main+0x4e>
				_delay_ms(400);
				break;
			case 0x10:
				sound(784);
 72c:	80 e1       	ldi	r24, 0x10	; 16
 72e:	93 e0       	ldi	r25, 0x03	; 3
 730:	0e 94 c8 02 	call	0x590	; 0x590 <sound>
				lcd_puts(2,"SOL");
 734:	82 e0       	ldi	r24, 0x02	; 2
 736:	68 e1       	ldi	r22, 0x18	; 24
 738:	71 e0       	ldi	r23, 0x01	; 1
 73a:	1a c0       	rjmp	.+52     	; 0x770 <main+0x15c>
				//_delay_ms(400);
				break;
			case 0x20:
				sound(880);
 73c:	80 e7       	ldi	r24, 0x70	; 112
 73e:	93 e0       	ldi	r25, 0x03	; 3
 740:	0e 94 c8 02 	call	0x590	; 0x590 <sound>
				lcd_puts(2,"RA");
 744:	82 e0       	ldi	r24, 0x02	; 2
 746:	6c e1       	ldi	r22, 0x1C	; 28
 748:	71 e0       	ldi	r23, 0x01	; 1
 74a:	12 c0       	rjmp	.+36     	; 0x770 <main+0x15c>
				//_delay_ms(400);
				break;
			case 0x40:
				sound(988);
 74c:	8c ed       	ldi	r24, 0xDC	; 220
 74e:	93 e0       	ldi	r25, 0x03	; 3
 750:	0e 94 c8 02 	call	0x590	; 0x590 <sound>
				lcd_puts(2,"SI");
 754:	82 e0       	ldi	r24, 0x02	; 2
 756:	6f e1       	ldi	r22, 0x1F	; 31
 758:	71 e0       	ldi	r23, 0x01	; 1
 75a:	0a c0       	rjmp	.+20     	; 0x770 <main+0x15c>
				//_delay_ms(400);
				break;
			case 0x80:
				sound(523*2);
 75c:	86 e1       	ldi	r24, 0x16	; 22
 75e:	94 e0       	ldi	r25, 0x04	; 4
 760:	02 c0       	rjmp	.+4      	; 0x766 <main+0x152>
				sound(0);
				lcd_puts(2,"DO");
				//_delay_ms(400);
				break;
			default:
				sound(0);
 762:	80 e0       	ldi	r24, 0x00	; 0
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	0e 94 c8 02 	call	0x590	; 0x590 <sound>
				lcd_puts(2,"DO");
 76a:	82 e0       	ldi	r24, 0x02	; 2
 76c:	6c e0       	ldi	r22, 0x0C	; 12
 76e:	71 e0       	ldi	r23, 0x01	; 1
 770:	0e 94 30 02 	call	0x460	; 0x460 <lcd_puts>
 774:	76 cf       	rjmp	.-276    	; 0x662 <main+0x4e>

00000776 <__subsf3>:
 776:	50 58       	subi	r21, 0x80	; 128

00000778 <__addsf3>:
 778:	bb 27       	eor	r27, r27
 77a:	aa 27       	eor	r26, r26
 77c:	0e d0       	rcall	.+28     	; 0x79a <__addsf3x>
 77e:	21 c1       	rjmp	.+578    	; 0x9c2 <__fp_round>
 780:	12 d1       	rcall	.+548    	; 0x9a6 <__fp_pscA>
 782:	30 f0       	brcs	.+12     	; 0x790 <__addsf3+0x18>
 784:	17 d1       	rcall	.+558    	; 0x9b4 <__fp_pscB>
 786:	20 f0       	brcs	.+8      	; 0x790 <__addsf3+0x18>
 788:	31 f4       	brne	.+12     	; 0x796 <__addsf3+0x1e>
 78a:	9f 3f       	cpi	r25, 0xFF	; 255
 78c:	11 f4       	brne	.+4      	; 0x792 <__addsf3+0x1a>
 78e:	1e f4       	brtc	.+6      	; 0x796 <__addsf3+0x1e>
 790:	07 c1       	rjmp	.+526    	; 0x9a0 <__fp_nan>
 792:	0e f4       	brtc	.+2      	; 0x796 <__addsf3+0x1e>
 794:	e0 95       	com	r30
 796:	e7 fb       	bst	r30, 7
 798:	d4 c0       	rjmp	.+424    	; 0x942 <__fp_inf>

0000079a <__addsf3x>:
 79a:	e9 2f       	mov	r30, r25
 79c:	23 d1       	rcall	.+582    	; 0x9e4 <__fp_split3>
 79e:	80 f3       	brcs	.-32     	; 0x780 <__addsf3+0x8>
 7a0:	ba 17       	cp	r27, r26
 7a2:	62 07       	cpc	r22, r18
 7a4:	73 07       	cpc	r23, r19
 7a6:	84 07       	cpc	r24, r20
 7a8:	95 07       	cpc	r25, r21
 7aa:	18 f0       	brcs	.+6      	; 0x7b2 <__addsf3x+0x18>
 7ac:	71 f4       	brne	.+28     	; 0x7ca <__addsf3x+0x30>
 7ae:	9e f5       	brtc	.+102    	; 0x816 <__addsf3x+0x7c>
 7b0:	52 c1       	rjmp	.+676    	; 0xa56 <__fp_zero>
 7b2:	0e f4       	brtc	.+2      	; 0x7b6 <__addsf3x+0x1c>
 7b4:	e0 95       	com	r30
 7b6:	0b 2e       	mov	r0, r27
 7b8:	ba 2f       	mov	r27, r26
 7ba:	a0 2d       	mov	r26, r0
 7bc:	0b 01       	movw	r0, r22
 7be:	b9 01       	movw	r22, r18
 7c0:	90 01       	movw	r18, r0
 7c2:	0c 01       	movw	r0, r24
 7c4:	ca 01       	movw	r24, r20
 7c6:	a0 01       	movw	r20, r0
 7c8:	11 24       	eor	r1, r1
 7ca:	ff 27       	eor	r31, r31
 7cc:	59 1b       	sub	r21, r25
 7ce:	99 f0       	breq	.+38     	; 0x7f6 <__addsf3x+0x5c>
 7d0:	59 3f       	cpi	r21, 0xF9	; 249
 7d2:	50 f4       	brcc	.+20     	; 0x7e8 <__addsf3x+0x4e>
 7d4:	50 3e       	cpi	r21, 0xE0	; 224
 7d6:	68 f1       	brcs	.+90     	; 0x832 <__addsf3x+0x98>
 7d8:	1a 16       	cp	r1, r26
 7da:	f0 40       	sbci	r31, 0x00	; 0
 7dc:	a2 2f       	mov	r26, r18
 7de:	23 2f       	mov	r18, r19
 7e0:	34 2f       	mov	r19, r20
 7e2:	44 27       	eor	r20, r20
 7e4:	58 5f       	subi	r21, 0xF8	; 248
 7e6:	f3 cf       	rjmp	.-26     	; 0x7ce <__addsf3x+0x34>
 7e8:	46 95       	lsr	r20
 7ea:	37 95       	ror	r19
 7ec:	27 95       	ror	r18
 7ee:	a7 95       	ror	r26
 7f0:	f0 40       	sbci	r31, 0x00	; 0
 7f2:	53 95       	inc	r21
 7f4:	c9 f7       	brne	.-14     	; 0x7e8 <__addsf3x+0x4e>
 7f6:	7e f4       	brtc	.+30     	; 0x816 <__addsf3x+0x7c>
 7f8:	1f 16       	cp	r1, r31
 7fa:	ba 0b       	sbc	r27, r26
 7fc:	62 0b       	sbc	r22, r18
 7fe:	73 0b       	sbc	r23, r19
 800:	84 0b       	sbc	r24, r20
 802:	ba f0       	brmi	.+46     	; 0x832 <__addsf3x+0x98>
 804:	91 50       	subi	r25, 0x01	; 1
 806:	a1 f0       	breq	.+40     	; 0x830 <__addsf3x+0x96>
 808:	ff 0f       	add	r31, r31
 80a:	bb 1f       	adc	r27, r27
 80c:	66 1f       	adc	r22, r22
 80e:	77 1f       	adc	r23, r23
 810:	88 1f       	adc	r24, r24
 812:	c2 f7       	brpl	.-16     	; 0x804 <__addsf3x+0x6a>
 814:	0e c0       	rjmp	.+28     	; 0x832 <__addsf3x+0x98>
 816:	ba 0f       	add	r27, r26
 818:	62 1f       	adc	r22, r18
 81a:	73 1f       	adc	r23, r19
 81c:	84 1f       	adc	r24, r20
 81e:	48 f4       	brcc	.+18     	; 0x832 <__addsf3x+0x98>
 820:	87 95       	ror	r24
 822:	77 95       	ror	r23
 824:	67 95       	ror	r22
 826:	b7 95       	ror	r27
 828:	f7 95       	ror	r31
 82a:	9e 3f       	cpi	r25, 0xFE	; 254
 82c:	08 f0       	brcs	.+2      	; 0x830 <__addsf3x+0x96>
 82e:	b3 cf       	rjmp	.-154    	; 0x796 <__addsf3+0x1e>
 830:	93 95       	inc	r25
 832:	88 0f       	add	r24, r24
 834:	08 f0       	brcs	.+2      	; 0x838 <__addsf3x+0x9e>
 836:	99 27       	eor	r25, r25
 838:	ee 0f       	add	r30, r30
 83a:	97 95       	ror	r25
 83c:	87 95       	ror	r24
 83e:	08 95       	ret

00000840 <__fixsfsi>:
 840:	04 d0       	rcall	.+8      	; 0x84a <__fixunssfsi>
 842:	68 94       	set
 844:	b1 11       	cpse	r27, r1
 846:	08 c1       	rjmp	.+528    	; 0xa58 <__fp_szero>
 848:	08 95       	ret

0000084a <__fixunssfsi>:
 84a:	d4 d0       	rcall	.+424    	; 0x9f4 <__fp_splitA>
 84c:	88 f0       	brcs	.+34     	; 0x870 <__fixunssfsi+0x26>
 84e:	9f 57       	subi	r25, 0x7F	; 127
 850:	90 f0       	brcs	.+36     	; 0x876 <__fixunssfsi+0x2c>
 852:	b9 2f       	mov	r27, r25
 854:	99 27       	eor	r25, r25
 856:	b7 51       	subi	r27, 0x17	; 23
 858:	a0 f0       	brcs	.+40     	; 0x882 <__fixunssfsi+0x38>
 85a:	d1 f0       	breq	.+52     	; 0x890 <__fixunssfsi+0x46>
 85c:	66 0f       	add	r22, r22
 85e:	77 1f       	adc	r23, r23
 860:	88 1f       	adc	r24, r24
 862:	99 1f       	adc	r25, r25
 864:	1a f0       	brmi	.+6      	; 0x86c <__fixunssfsi+0x22>
 866:	ba 95       	dec	r27
 868:	c9 f7       	brne	.-14     	; 0x85c <__fixunssfsi+0x12>
 86a:	12 c0       	rjmp	.+36     	; 0x890 <__fixunssfsi+0x46>
 86c:	b1 30       	cpi	r27, 0x01	; 1
 86e:	81 f0       	breq	.+32     	; 0x890 <__fixunssfsi+0x46>
 870:	f2 d0       	rcall	.+484    	; 0xa56 <__fp_zero>
 872:	b1 e0       	ldi	r27, 0x01	; 1
 874:	08 95       	ret
 876:	ef c0       	rjmp	.+478    	; 0xa56 <__fp_zero>
 878:	67 2f       	mov	r22, r23
 87a:	78 2f       	mov	r23, r24
 87c:	88 27       	eor	r24, r24
 87e:	b8 5f       	subi	r27, 0xF8	; 248
 880:	39 f0       	breq	.+14     	; 0x890 <__fixunssfsi+0x46>
 882:	b9 3f       	cpi	r27, 0xF9	; 249
 884:	cc f3       	brlt	.-14     	; 0x878 <__fixunssfsi+0x2e>
 886:	86 95       	lsr	r24
 888:	77 95       	ror	r23
 88a:	67 95       	ror	r22
 88c:	b3 95       	inc	r27
 88e:	d9 f7       	brne	.-10     	; 0x886 <__fixunssfsi+0x3c>
 890:	3e f4       	brtc	.+14     	; 0x8a0 <__fixunssfsi+0x56>
 892:	90 95       	com	r25
 894:	80 95       	com	r24
 896:	70 95       	com	r23
 898:	61 95       	neg	r22
 89a:	7f 4f       	sbci	r23, 0xFF	; 255
 89c:	8f 4f       	sbci	r24, 0xFF	; 255
 89e:	9f 4f       	sbci	r25, 0xFF	; 255
 8a0:	08 95       	ret

000008a2 <__floatunsisf>:
 8a2:	e8 94       	clt
 8a4:	09 c0       	rjmp	.+18     	; 0x8b8 <__floatsisf+0x12>

000008a6 <__floatsisf>:
 8a6:	97 fb       	bst	r25, 7
 8a8:	3e f4       	brtc	.+14     	; 0x8b8 <__floatsisf+0x12>
 8aa:	90 95       	com	r25
 8ac:	80 95       	com	r24
 8ae:	70 95       	com	r23
 8b0:	61 95       	neg	r22
 8b2:	7f 4f       	sbci	r23, 0xFF	; 255
 8b4:	8f 4f       	sbci	r24, 0xFF	; 255
 8b6:	9f 4f       	sbci	r25, 0xFF	; 255
 8b8:	99 23       	and	r25, r25
 8ba:	a9 f0       	breq	.+42     	; 0x8e6 <__floatsisf+0x40>
 8bc:	f9 2f       	mov	r31, r25
 8be:	96 e9       	ldi	r25, 0x96	; 150
 8c0:	bb 27       	eor	r27, r27
 8c2:	93 95       	inc	r25
 8c4:	f6 95       	lsr	r31
 8c6:	87 95       	ror	r24
 8c8:	77 95       	ror	r23
 8ca:	67 95       	ror	r22
 8cc:	b7 95       	ror	r27
 8ce:	f1 11       	cpse	r31, r1
 8d0:	f8 cf       	rjmp	.-16     	; 0x8c2 <__floatsisf+0x1c>
 8d2:	fa f4       	brpl	.+62     	; 0x912 <__floatsisf+0x6c>
 8d4:	bb 0f       	add	r27, r27
 8d6:	11 f4       	brne	.+4      	; 0x8dc <__floatsisf+0x36>
 8d8:	60 ff       	sbrs	r22, 0
 8da:	1b c0       	rjmp	.+54     	; 0x912 <__floatsisf+0x6c>
 8dc:	6f 5f       	subi	r22, 0xFF	; 255
 8de:	7f 4f       	sbci	r23, 0xFF	; 255
 8e0:	8f 4f       	sbci	r24, 0xFF	; 255
 8e2:	9f 4f       	sbci	r25, 0xFF	; 255
 8e4:	16 c0       	rjmp	.+44     	; 0x912 <__floatsisf+0x6c>
 8e6:	88 23       	and	r24, r24
 8e8:	11 f0       	breq	.+4      	; 0x8ee <__floatsisf+0x48>
 8ea:	96 e9       	ldi	r25, 0x96	; 150
 8ec:	11 c0       	rjmp	.+34     	; 0x910 <__floatsisf+0x6a>
 8ee:	77 23       	and	r23, r23
 8f0:	21 f0       	breq	.+8      	; 0x8fa <__floatsisf+0x54>
 8f2:	9e e8       	ldi	r25, 0x8E	; 142
 8f4:	87 2f       	mov	r24, r23
 8f6:	76 2f       	mov	r23, r22
 8f8:	05 c0       	rjmp	.+10     	; 0x904 <__floatsisf+0x5e>
 8fa:	66 23       	and	r22, r22
 8fc:	71 f0       	breq	.+28     	; 0x91a <__floatsisf+0x74>
 8fe:	96 e8       	ldi	r25, 0x86	; 134
 900:	86 2f       	mov	r24, r22
 902:	70 e0       	ldi	r23, 0x00	; 0
 904:	60 e0       	ldi	r22, 0x00	; 0
 906:	2a f0       	brmi	.+10     	; 0x912 <__floatsisf+0x6c>
 908:	9a 95       	dec	r25
 90a:	66 0f       	add	r22, r22
 90c:	77 1f       	adc	r23, r23
 90e:	88 1f       	adc	r24, r24
 910:	da f7       	brpl	.-10     	; 0x908 <__floatsisf+0x62>
 912:	88 0f       	add	r24, r24
 914:	96 95       	lsr	r25
 916:	87 95       	ror	r24
 918:	97 f9       	bld	r25, 7
 91a:	08 95       	ret

0000091c <floor>:
 91c:	85 d0       	rcall	.+266    	; 0xa28 <__fp_trunc>
 91e:	80 f0       	brcs	.+32     	; 0x940 <floor+0x24>
 920:	9f 37       	cpi	r25, 0x7F	; 127
 922:	40 f4       	brcc	.+16     	; 0x934 <floor+0x18>
 924:	91 11       	cpse	r25, r1
 926:	0e f0       	brts	.+2      	; 0x92a <floor+0xe>
 928:	97 c0       	rjmp	.+302    	; 0xa58 <__fp_szero>
 92a:	60 e0       	ldi	r22, 0x00	; 0
 92c:	70 e0       	ldi	r23, 0x00	; 0
 92e:	80 e8       	ldi	r24, 0x80	; 128
 930:	9f eb       	ldi	r25, 0xBF	; 191
 932:	08 95       	ret
 934:	26 f4       	brtc	.+8      	; 0x93e <floor+0x22>
 936:	1b 16       	cp	r1, r27
 938:	61 1d       	adc	r22, r1
 93a:	71 1d       	adc	r23, r1
 93c:	81 1d       	adc	r24, r1
 93e:	07 c0       	rjmp	.+14     	; 0x94e <__fp_mintl>
 940:	21 c0       	rjmp	.+66     	; 0x984 <__fp_mpack>

00000942 <__fp_inf>:
 942:	97 f9       	bld	r25, 7
 944:	9f 67       	ori	r25, 0x7F	; 127
 946:	80 e8       	ldi	r24, 0x80	; 128
 948:	70 e0       	ldi	r23, 0x00	; 0
 94a:	60 e0       	ldi	r22, 0x00	; 0
 94c:	08 95       	ret

0000094e <__fp_mintl>:
 94e:	88 23       	and	r24, r24
 950:	71 f4       	brne	.+28     	; 0x96e <__fp_mintl+0x20>
 952:	77 23       	and	r23, r23
 954:	21 f0       	breq	.+8      	; 0x95e <__fp_mintl+0x10>
 956:	98 50       	subi	r25, 0x08	; 8
 958:	87 2b       	or	r24, r23
 95a:	76 2f       	mov	r23, r22
 95c:	07 c0       	rjmp	.+14     	; 0x96c <__fp_mintl+0x1e>
 95e:	66 23       	and	r22, r22
 960:	11 f4       	brne	.+4      	; 0x966 <__fp_mintl+0x18>
 962:	99 27       	eor	r25, r25
 964:	0d c0       	rjmp	.+26     	; 0x980 <__fp_mintl+0x32>
 966:	90 51       	subi	r25, 0x10	; 16
 968:	86 2b       	or	r24, r22
 96a:	70 e0       	ldi	r23, 0x00	; 0
 96c:	60 e0       	ldi	r22, 0x00	; 0
 96e:	2a f0       	brmi	.+10     	; 0x97a <__fp_mintl+0x2c>
 970:	9a 95       	dec	r25
 972:	66 0f       	add	r22, r22
 974:	77 1f       	adc	r23, r23
 976:	88 1f       	adc	r24, r24
 978:	da f7       	brpl	.-10     	; 0x970 <__fp_mintl+0x22>
 97a:	88 0f       	add	r24, r24
 97c:	96 95       	lsr	r25
 97e:	87 95       	ror	r24
 980:	97 f9       	bld	r25, 7
 982:	08 95       	ret

00000984 <__fp_mpack>:
 984:	9f 3f       	cpi	r25, 0xFF	; 255
 986:	31 f0       	breq	.+12     	; 0x994 <__fp_mpack_finite+0xc>

00000988 <__fp_mpack_finite>:
 988:	91 50       	subi	r25, 0x01	; 1
 98a:	20 f4       	brcc	.+8      	; 0x994 <__fp_mpack_finite+0xc>
 98c:	87 95       	ror	r24
 98e:	77 95       	ror	r23
 990:	67 95       	ror	r22
 992:	b7 95       	ror	r27
 994:	88 0f       	add	r24, r24
 996:	91 1d       	adc	r25, r1
 998:	96 95       	lsr	r25
 99a:	87 95       	ror	r24
 99c:	97 f9       	bld	r25, 7
 99e:	08 95       	ret

000009a0 <__fp_nan>:
 9a0:	9f ef       	ldi	r25, 0xFF	; 255
 9a2:	80 ec       	ldi	r24, 0xC0	; 192
 9a4:	08 95       	ret

000009a6 <__fp_pscA>:
 9a6:	00 24       	eor	r0, r0
 9a8:	0a 94       	dec	r0
 9aa:	16 16       	cp	r1, r22
 9ac:	17 06       	cpc	r1, r23
 9ae:	18 06       	cpc	r1, r24
 9b0:	09 06       	cpc	r0, r25
 9b2:	08 95       	ret

000009b4 <__fp_pscB>:
 9b4:	00 24       	eor	r0, r0
 9b6:	0a 94       	dec	r0
 9b8:	12 16       	cp	r1, r18
 9ba:	13 06       	cpc	r1, r19
 9bc:	14 06       	cpc	r1, r20
 9be:	05 06       	cpc	r0, r21
 9c0:	08 95       	ret

000009c2 <__fp_round>:
 9c2:	09 2e       	mov	r0, r25
 9c4:	03 94       	inc	r0
 9c6:	00 0c       	add	r0, r0
 9c8:	11 f4       	brne	.+4      	; 0x9ce <__fp_round+0xc>
 9ca:	88 23       	and	r24, r24
 9cc:	52 f0       	brmi	.+20     	; 0x9e2 <__fp_round+0x20>
 9ce:	bb 0f       	add	r27, r27
 9d0:	40 f4       	brcc	.+16     	; 0x9e2 <__fp_round+0x20>
 9d2:	bf 2b       	or	r27, r31
 9d4:	11 f4       	brne	.+4      	; 0x9da <__fp_round+0x18>
 9d6:	60 ff       	sbrs	r22, 0
 9d8:	04 c0       	rjmp	.+8      	; 0x9e2 <__fp_round+0x20>
 9da:	6f 5f       	subi	r22, 0xFF	; 255
 9dc:	7f 4f       	sbci	r23, 0xFF	; 255
 9de:	8f 4f       	sbci	r24, 0xFF	; 255
 9e0:	9f 4f       	sbci	r25, 0xFF	; 255
 9e2:	08 95       	ret

000009e4 <__fp_split3>:
 9e4:	57 fd       	sbrc	r21, 7
 9e6:	90 58       	subi	r25, 0x80	; 128
 9e8:	44 0f       	add	r20, r20
 9ea:	55 1f       	adc	r21, r21
 9ec:	59 f0       	breq	.+22     	; 0xa04 <__fp_splitA+0x10>
 9ee:	5f 3f       	cpi	r21, 0xFF	; 255
 9f0:	71 f0       	breq	.+28     	; 0xa0e <__fp_splitA+0x1a>
 9f2:	47 95       	ror	r20

000009f4 <__fp_splitA>:
 9f4:	88 0f       	add	r24, r24
 9f6:	97 fb       	bst	r25, 7
 9f8:	99 1f       	adc	r25, r25
 9fa:	61 f0       	breq	.+24     	; 0xa14 <__fp_splitA+0x20>
 9fc:	9f 3f       	cpi	r25, 0xFF	; 255
 9fe:	79 f0       	breq	.+30     	; 0xa1e <__fp_splitA+0x2a>
 a00:	87 95       	ror	r24
 a02:	08 95       	ret
 a04:	12 16       	cp	r1, r18
 a06:	13 06       	cpc	r1, r19
 a08:	14 06       	cpc	r1, r20
 a0a:	55 1f       	adc	r21, r21
 a0c:	f2 cf       	rjmp	.-28     	; 0x9f2 <__fp_split3+0xe>
 a0e:	46 95       	lsr	r20
 a10:	f1 df       	rcall	.-30     	; 0x9f4 <__fp_splitA>
 a12:	08 c0       	rjmp	.+16     	; 0xa24 <__fp_splitA+0x30>
 a14:	16 16       	cp	r1, r22
 a16:	17 06       	cpc	r1, r23
 a18:	18 06       	cpc	r1, r24
 a1a:	99 1f       	adc	r25, r25
 a1c:	f1 cf       	rjmp	.-30     	; 0xa00 <__fp_splitA+0xc>
 a1e:	86 95       	lsr	r24
 a20:	71 05       	cpc	r23, r1
 a22:	61 05       	cpc	r22, r1
 a24:	08 94       	sec
 a26:	08 95       	ret

00000a28 <__fp_trunc>:
 a28:	e5 df       	rcall	.-54     	; 0x9f4 <__fp_splitA>
 a2a:	a0 f0       	brcs	.+40     	; 0xa54 <__fp_trunc+0x2c>
 a2c:	be e7       	ldi	r27, 0x7E	; 126
 a2e:	b9 17       	cp	r27, r25
 a30:	88 f4       	brcc	.+34     	; 0xa54 <__fp_trunc+0x2c>
 a32:	bb 27       	eor	r27, r27
 a34:	9f 38       	cpi	r25, 0x8F	; 143
 a36:	60 f4       	brcc	.+24     	; 0xa50 <__fp_trunc+0x28>
 a38:	16 16       	cp	r1, r22
 a3a:	b1 1d       	adc	r27, r1
 a3c:	67 2f       	mov	r22, r23
 a3e:	78 2f       	mov	r23, r24
 a40:	88 27       	eor	r24, r24
 a42:	98 5f       	subi	r25, 0xF8	; 248
 a44:	f7 cf       	rjmp	.-18     	; 0xa34 <__fp_trunc+0xc>
 a46:	86 95       	lsr	r24
 a48:	77 95       	ror	r23
 a4a:	67 95       	ror	r22
 a4c:	b1 1d       	adc	r27, r1
 a4e:	93 95       	inc	r25
 a50:	96 39       	cpi	r25, 0x96	; 150
 a52:	c8 f3       	brcs	.-14     	; 0xa46 <__fp_trunc+0x1e>
 a54:	08 95       	ret

00000a56 <__fp_zero>:
 a56:	e8 94       	clt

00000a58 <__fp_szero>:
 a58:	bb 27       	eor	r27, r27
 a5a:	66 27       	eor	r22, r22
 a5c:	77 27       	eor	r23, r23
 a5e:	cb 01       	movw	r24, r22
 a60:	97 f9       	bld	r25, 7
 a62:	08 95       	ret

00000a64 <__udivmodqi4>:
 a64:	99 1b       	sub	r25, r25
 a66:	79 e0       	ldi	r23, 0x09	; 9
 a68:	04 c0       	rjmp	.+8      	; 0xa72 <__udivmodqi4_ep>

00000a6a <__udivmodqi4_loop>:
 a6a:	99 1f       	adc	r25, r25
 a6c:	96 17       	cp	r25, r22
 a6e:	08 f0       	brcs	.+2      	; 0xa72 <__udivmodqi4_ep>
 a70:	96 1b       	sub	r25, r22

00000a72 <__udivmodqi4_ep>:
 a72:	88 1f       	adc	r24, r24
 a74:	7a 95       	dec	r23
 a76:	c9 f7       	brne	.-14     	; 0xa6a <__udivmodqi4_loop>
 a78:	80 95       	com	r24
 a7a:	08 95       	ret

00000a7c <__udivmodhi4>:
 a7c:	aa 1b       	sub	r26, r26
 a7e:	bb 1b       	sub	r27, r27
 a80:	51 e1       	ldi	r21, 0x11	; 17
 a82:	07 c0       	rjmp	.+14     	; 0xa92 <__udivmodhi4_ep>

00000a84 <__udivmodhi4_loop>:
 a84:	aa 1f       	adc	r26, r26
 a86:	bb 1f       	adc	r27, r27
 a88:	a6 17       	cp	r26, r22
 a8a:	b7 07       	cpc	r27, r23
 a8c:	10 f0       	brcs	.+4      	; 0xa92 <__udivmodhi4_ep>
 a8e:	a6 1b       	sub	r26, r22
 a90:	b7 0b       	sbc	r27, r23

00000a92 <__udivmodhi4_ep>:
 a92:	88 1f       	adc	r24, r24
 a94:	99 1f       	adc	r25, r25
 a96:	5a 95       	dec	r21
 a98:	a9 f7       	brne	.-22     	; 0xa84 <__udivmodhi4_loop>
 a9a:	80 95       	com	r24
 a9c:	90 95       	com	r25
 a9e:	bc 01       	movw	r22, r24
 aa0:	cd 01       	movw	r24, r26
 aa2:	08 95       	ret

00000aa4 <__divmodhi4>:
 aa4:	97 fb       	bst	r25, 7
 aa6:	09 2e       	mov	r0, r25
 aa8:	07 26       	eor	r0, r23
 aaa:	0a d0       	rcall	.+20     	; 0xac0 <__divmodhi4_neg1>
 aac:	77 fd       	sbrc	r23, 7
 aae:	04 d0       	rcall	.+8      	; 0xab8 <__divmodhi4_neg2>
 ab0:	e5 df       	rcall	.-54     	; 0xa7c <__udivmodhi4>
 ab2:	06 d0       	rcall	.+12     	; 0xac0 <__divmodhi4_neg1>
 ab4:	00 20       	and	r0, r0
 ab6:	1a f4       	brpl	.+6      	; 0xabe <__divmodhi4_exit>

00000ab8 <__divmodhi4_neg2>:
 ab8:	70 95       	com	r23
 aba:	61 95       	neg	r22
 abc:	7f 4f       	sbci	r23, 0xFF	; 255

00000abe <__divmodhi4_exit>:
 abe:	08 95       	ret

00000ac0 <__divmodhi4_neg1>:
 ac0:	f6 f7       	brtc	.-4      	; 0xabe <__divmodhi4_exit>
 ac2:	90 95       	com	r25
 ac4:	81 95       	neg	r24
 ac6:	9f 4f       	sbci	r25, 0xFF	; 255
 ac8:	08 95       	ret

00000aca <__divmodsi4>:
 aca:	97 fb       	bst	r25, 7
 acc:	09 2e       	mov	r0, r25
 ace:	05 26       	eor	r0, r21
 ad0:	0e d0       	rcall	.+28     	; 0xaee <__divmodsi4_neg1>
 ad2:	57 fd       	sbrc	r21, 7
 ad4:	04 d0       	rcall	.+8      	; 0xade <__divmodsi4_neg2>
 ad6:	14 d0       	rcall	.+40     	; 0xb00 <__udivmodsi4>
 ad8:	0a d0       	rcall	.+20     	; 0xaee <__divmodsi4_neg1>
 ada:	00 1c       	adc	r0, r0
 adc:	38 f4       	brcc	.+14     	; 0xaec <__divmodsi4_exit>

00000ade <__divmodsi4_neg2>:
 ade:	50 95       	com	r21
 ae0:	40 95       	com	r20
 ae2:	30 95       	com	r19
 ae4:	21 95       	neg	r18
 ae6:	3f 4f       	sbci	r19, 0xFF	; 255
 ae8:	4f 4f       	sbci	r20, 0xFF	; 255
 aea:	5f 4f       	sbci	r21, 0xFF	; 255

00000aec <__divmodsi4_exit>:
 aec:	08 95       	ret

00000aee <__divmodsi4_neg1>:
 aee:	f6 f7       	brtc	.-4      	; 0xaec <__divmodsi4_exit>
 af0:	90 95       	com	r25
 af2:	80 95       	com	r24
 af4:	70 95       	com	r23
 af6:	61 95       	neg	r22
 af8:	7f 4f       	sbci	r23, 0xFF	; 255
 afa:	8f 4f       	sbci	r24, 0xFF	; 255
 afc:	9f 4f       	sbci	r25, 0xFF	; 255
 afe:	08 95       	ret

00000b00 <__udivmodsi4>:
 b00:	a1 e2       	ldi	r26, 0x21	; 33
 b02:	1a 2e       	mov	r1, r26
 b04:	aa 1b       	sub	r26, r26
 b06:	bb 1b       	sub	r27, r27
 b08:	fd 01       	movw	r30, r26
 b0a:	0d c0       	rjmp	.+26     	; 0xb26 <__udivmodsi4_ep>

00000b0c <__udivmodsi4_loop>:
 b0c:	aa 1f       	adc	r26, r26
 b0e:	bb 1f       	adc	r27, r27
 b10:	ee 1f       	adc	r30, r30
 b12:	ff 1f       	adc	r31, r31
 b14:	a2 17       	cp	r26, r18
 b16:	b3 07       	cpc	r27, r19
 b18:	e4 07       	cpc	r30, r20
 b1a:	f5 07       	cpc	r31, r21
 b1c:	20 f0       	brcs	.+8      	; 0xb26 <__udivmodsi4_ep>
 b1e:	a2 1b       	sub	r26, r18
 b20:	b3 0b       	sbc	r27, r19
 b22:	e4 0b       	sbc	r30, r20
 b24:	f5 0b       	sbc	r31, r21

00000b26 <__udivmodsi4_ep>:
 b26:	66 1f       	adc	r22, r22
 b28:	77 1f       	adc	r23, r23
 b2a:	88 1f       	adc	r24, r24
 b2c:	99 1f       	adc	r25, r25
 b2e:	1a 94       	dec	r1
 b30:	69 f7       	brne	.-38     	; 0xb0c <__udivmodsi4_loop>
 b32:	60 95       	com	r22
 b34:	70 95       	com	r23
 b36:	80 95       	com	r24
 b38:	90 95       	com	r25
 b3a:	9b 01       	movw	r18, r22
 b3c:	ac 01       	movw	r20, r24
 b3e:	bd 01       	movw	r22, r26
 b40:	cf 01       	movw	r24, r30
 b42:	08 95       	ret

00000b44 <_exit>:
 b44:	f8 94       	cli

00000b46 <__stop_program>:
 b46:	ff cf       	rjmp	.-2      	; 0xb46 <__stop_program>
