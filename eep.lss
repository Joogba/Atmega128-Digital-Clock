
eep.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000654  000006e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000654  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800126  00800126  0000070e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000070e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000018a  00000000  00000000  0000072e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005dd  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ca  00000000  00000000  00000e95  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006dd  00000000  00000000  0000105f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  0000173c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001c5  00000000  00000000  000018bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000397  00000000  00000000  00001a81  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001e18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e5       	ldi	r30, 0x54	; 84
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 32       	cpi	r26, 0x26	; 38
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a6 e2       	ldi	r26, 0x26	; 38
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 32       	cpi	r26, 0x2B	; 43
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 96 02 	call	0x52c	; 0x52c <main>
  c6:	0c 94 28 03 	jmp	0x650	; 0x650 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <lcdDelay>:
	LCD_ENABLE_OFF;
	lcdDelay(5);
}

void lcdDelay(char d)
{
  ce:	df 93       	push	r29
  d0:	cf 93       	push	r28
  d2:	00 d0       	rcall	.+0      	; 0xd4 <lcdDelay+0x6>
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
  d8:	28 2f       	mov	r18, r24
  da:	0d c0       	rjmp	.+26     	; 0xf6 <lcdDelay+0x28>
	volatile di;
	while(d--)
    	for(di=0; di<2; di++);
  dc:	1a 82       	std	Y+2, r1	; 0x02
  de:	19 82       	std	Y+1, r1	; 0x01
  e0:	05 c0       	rjmp	.+10     	; 0xec <lcdDelay+0x1e>
  e2:	89 81       	ldd	r24, Y+1	; 0x01
  e4:	9a 81       	ldd	r25, Y+2	; 0x02
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	9a 83       	std	Y+2, r25	; 0x02
  ea:	89 83       	std	Y+1, r24	; 0x01
  ec:	89 81       	ldd	r24, Y+1	; 0x01
  ee:	9a 81       	ldd	r25, Y+2	; 0x02
  f0:	02 97       	sbiw	r24, 0x02	; 2
  f2:	bc f3       	brlt	.-18     	; 0xe2 <lcdDelay+0x14>
  f4:	21 50       	subi	r18, 0x01	; 1
}

void lcdDelay(char d)
{
	volatile di;
	while(d--)
  f6:	22 23       	and	r18, r18
  f8:	89 f7       	brne	.-30     	; 0xdc <lcdDelay+0xe>
    	for(di=0; di<2; di++);
}
  fa:	0f 90       	pop	r0
  fc:	0f 90       	pop	r0
  fe:	cf 91       	pop	r28
 100:	df 91       	pop	r29
 102:	08 95       	ret

00000104 <lcdRegWrite>:
	lcd_putn3(number/1000);
	lcd_putn3(number);
}

void lcdRegWrite(unsigned char reg)
{
 104:	ff 92       	push	r15
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	f8 2e       	mov	r15, r24
	LCD_R_W_OFF;
 10c:	80 91 2a 01 	lds	r24, 0x012A
 110:	98 2f       	mov	r25, r24
 112:	9d 70       	andi	r25, 0x0D	; 13
 114:	01 e0       	ldi	r16, 0x01	; 1
 116:	10 e8       	ldi	r17, 0x80	; 128
 118:	f8 01       	movw	r30, r16
 11a:	90 83       	st	Z, r25
	LCD_RS_OFF;
 11c:	8c 70       	andi	r24, 0x0C	; 12
 11e:	80 93 2a 01 	sts	0x012A, r24
 122:	80 83       	st	Z, r24
	lcdDelay(5);
 124:	85 e0       	ldi	r24, 0x05	; 5
 126:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
	LCD_ENABLE_ON;
 12a:	80 91 2a 01 	lds	r24, 0x012A
 12e:	84 60       	ori	r24, 0x04	; 4
 130:	80 93 2a 01 	sts	0x012A, r24
 134:	f8 01       	movw	r30, r16
 136:	80 83       	st	Z, r24
	LCD_DATA = reg;
 138:	f0 92 00 80 	sts	0x8000, r15
	lcdDelay(10);
 13c:	8a e0       	ldi	r24, 0x0A	; 10
 13e:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
	LCD_ENABLE_OFF;
 142:	80 91 2a 01 	lds	r24, 0x012A
 146:	8b 70       	andi	r24, 0x0B	; 11
 148:	80 93 2a 01 	sts	0x012A, r24
 14c:	f8 01       	movw	r30, r16
 14e:	80 83       	st	Z, r24
	lcdDelay(5);
 150:	85 e0       	ldi	r24, 0x05	; 5
 152:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
}
 156:	1f 91       	pop	r17
 158:	0f 91       	pop	r16
 15a:	ff 90       	pop	r15
 15c:	08 95       	ret

0000015e <lcd_putch>:
		lcd_putch(temp + 0x57);
	}
}

void lcd_putch(unsigned char reg)
{
 15e:	ff 92       	push	r15
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	f8 2e       	mov	r15, r24
	LCD_R_W_OFF;
 166:	80 91 2a 01 	lds	r24, 0x012A
 16a:	8d 70       	andi	r24, 0x0D	; 13
 16c:	01 e0       	ldi	r16, 0x01	; 1
 16e:	10 e8       	ldi	r17, 0x80	; 128
 170:	f8 01       	movw	r30, r16
 172:	80 83       	st	Z, r24
	LCD_RS_ON;
 174:	81 60       	ori	r24, 0x01	; 1
 176:	80 93 2a 01 	sts	0x012A, r24
 17a:	80 83       	st	Z, r24
	lcdDelay(5);
 17c:	85 e0       	ldi	r24, 0x05	; 5
 17e:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
	LCD_ENABLE_ON;
 182:	80 91 2a 01 	lds	r24, 0x012A
 186:	84 60       	ori	r24, 0x04	; 4
 188:	80 93 2a 01 	sts	0x012A, r24
 18c:	f8 01       	movw	r30, r16
 18e:	80 83       	st	Z, r24
	LCD_DATA = reg;
 190:	f0 92 00 80 	sts	0x8000, r15
	lcdDelay(10);
 194:	8a e0       	ldi	r24, 0x0A	; 10
 196:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
	LCD_ENABLE_OFF;
 19a:	80 91 2a 01 	lds	r24, 0x012A
 19e:	8b 70       	andi	r24, 0x0B	; 11
 1a0:	80 93 2a 01 	sts	0x012A, r24
 1a4:	f8 01       	movw	r30, r16
 1a6:	80 83       	st	Z, r24
	lcdDelay(5);
 1a8:	85 e0       	ldi	r24, 0x05	; 5
 1aa:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
}
 1ae:	1f 91       	pop	r17
 1b0:	0f 91       	pop	r16
 1b2:	ff 90       	pop	r15
 1b4:	08 95       	ret

000001b6 <lcd_putn3>:
//	lcd_putch(hex_char[number&0x0f]);
	lcd_putch((number&0x0f)+'0');
}
//-사용자- 3자리 숫자 출력 예)012
void lcd_putn3(unsigned int number)
{
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
	number%=1000;
 1ba:	68 ee       	ldi	r22, 0xE8	; 232
 1bc:	73 e0       	ldi	r23, 0x03	; 3
 1be:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__udivmodhi4>
 1c2:	18 2f       	mov	r17, r24
 1c4:	09 2f       	mov	r16, r25
	lcd_putch(number/100+'0');
 1c6:	64 e6       	ldi	r22, 0x64	; 100
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__udivmodhi4>
 1ce:	86 2f       	mov	r24, r22
 1d0:	80 5d       	subi	r24, 0xD0	; 208
 1d2:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
	number%=100;
 1d6:	81 2f       	mov	r24, r17
 1d8:	90 2f       	mov	r25, r16
 1da:	64 e6       	ldi	r22, 0x64	; 100
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__udivmodhi4>
 1e2:	18 2f       	mov	r17, r24
 1e4:	09 2f       	mov	r16, r25
	lcd_putch(number/10+'0');
 1e6:	6a e0       	ldi	r22, 0x0A	; 10
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__udivmodhi4>
 1ee:	86 2f       	mov	r24, r22
 1f0:	80 5d       	subi	r24, 0xD0	; 208
 1f2:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
	number%=10;
	lcd_putch(number+'0');
 1f6:	81 2f       	mov	r24, r17
 1f8:	90 2f       	mov	r25, r16
 1fa:	6a e0       	ldi	r22, 0x0A	; 10
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__udivmodhi4>
 202:	80 5d       	subi	r24, 0xD0	; 208
 204:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
}
 208:	1f 91       	pop	r17
 20a:	0f 91       	pop	r16
 20c:	08 95       	ret

0000020e <lcd_putn6>:
	lcd_putn2(number/1000);
	lcd_putn3(number);
}
//-사용자- 6자리 숫자 출력 예)001234
void lcd_putn6(unsigned int number)
{
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	8c 01       	movw	r16, r24
	lcd_putn3(number/1000);
 214:	68 ee       	ldi	r22, 0xE8	; 232
 216:	73 e0       	ldi	r23, 0x03	; 3
 218:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__udivmodhi4>
 21c:	cb 01       	movw	r24, r22
 21e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_putn3>
	lcd_putn3(number);
 222:	c8 01       	movw	r24, r16
 224:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_putn3>
}
 228:	1f 91       	pop	r17
 22a:	0f 91       	pop	r16
 22c:	08 95       	ret

0000022e <lcd_puth2>:
	number%=10;
	lcd_putch(number+'0');
}
unsigned char hex_char[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'}; 
void lcd_puth2(unsigned int number)
{
 22e:	0f 93       	push	r16
 230:	1f 93       	push	r17
	number%=100;
 232:	64 e6       	ldi	r22, 0x64	; 100
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__udivmodhi4>
 23a:	8c 01       	movw	r16, r24
	lcd_putch((number/16)+'0');
 23c:	24 e0       	ldi	r18, 0x04	; 4
 23e:	96 95       	lsr	r25
 240:	87 95       	ror	r24
 242:	2a 95       	dec	r18
 244:	e1 f7       	brne	.-8      	; 0x23e <lcd_puth2+0x10>
 246:	80 5d       	subi	r24, 0xD0	; 208
 248:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
//	number%=10;
//	lcd_putch(hex_char[number&0x0f]);
	lcd_putch((number&0x0f)+'0');
 24c:	0f 70       	andi	r16, 0x0F	; 15
 24e:	80 2f       	mov	r24, r16
 250:	80 5d       	subi	r24, 0xD0	; 208
 252:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
}
 256:	1f 91       	pop	r17
 258:	0f 91       	pop	r16
 25a:	08 95       	ret

0000025c <lcd_putn2>:
{
	number%=10;
	lcd_putch(number+'0');
}
void lcd_putn2(unsigned int number)
{
 25c:	0f 93       	push	r16
 25e:	1f 93       	push	r17
	number%=100;
 260:	64 e6       	ldi	r22, 0x64	; 100
 262:	70 e0       	ldi	r23, 0x00	; 0
 264:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__udivmodhi4>
 268:	18 2f       	mov	r17, r24
 26a:	09 2f       	mov	r16, r25
	lcd_putch(number/10+'0');
 26c:	6a e0       	ldi	r22, 0x0A	; 10
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__udivmodhi4>
 274:	86 2f       	mov	r24, r22
 276:	80 5d       	subi	r24, 0xD0	; 208
 278:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
	number%=10;
	lcd_putch(number+'0');
 27c:	81 2f       	mov	r24, r17
 27e:	90 2f       	mov	r25, r16
 280:	6a e0       	ldi	r22, 0x0A	; 10
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__udivmodhi4>
 288:	80 5d       	subi	r24, 0xD0	; 208
 28a:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
}
 28e:	1f 91       	pop	r17
 290:	0f 91       	pop	r16
 292:	08 95       	ret

00000294 <lcd_putn5>:
{
	lcd_putn1(number/1000);
	lcd_putn3(number);
}
void lcd_putn5(unsigned int number)
{
 294:	0f 93       	push	r16
 296:	1f 93       	push	r17
 298:	8c 01       	movw	r16, r24
	lcd_putn2(number/1000);
 29a:	68 ee       	ldi	r22, 0xE8	; 232
 29c:	73 e0       	ldi	r23, 0x03	; 3
 29e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__udivmodhi4>
 2a2:	cb 01       	movw	r24, r22
 2a4:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_putn2>
	lcd_putn3(number);
 2a8:	c8 01       	movw	r24, r16
 2aa:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_putn3>
}
 2ae:	1f 91       	pop	r17
 2b0:	0f 91       	pop	r16
 2b2:	08 95       	ret

000002b4 <lcd_putn1>:
}

void lcd_putn1(unsigned int number)
{
	number%=10;
	lcd_putch(number+'0');
 2b4:	6a e0       	ldi	r22, 0x0A	; 10
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__udivmodhi4>
 2bc:	80 5d       	subi	r24, 0xD0	; 208
 2be:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
}
 2c2:	08 95       	ret

000002c4 <lcd_putn4>:
	lcd_putch(number/10+'0');
	number%=10;
	lcd_putch(number+'0');
}
void lcd_putn4(unsigned int number)
{
 2c4:	0f 93       	push	r16
 2c6:	1f 93       	push	r17
 2c8:	8c 01       	movw	r16, r24
	lcd_putn1(number/1000);
 2ca:	68 ee       	ldi	r22, 0xE8	; 232
 2cc:	73 e0       	ldi	r23, 0x03	; 3
 2ce:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__udivmodhi4>
 2d2:	cb 01       	movw	r24, r22
 2d4:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_putn1>
	lcd_putn3(number);
 2d8:	c8 01       	movw	r24, r16
 2da:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_putn3>
}
 2de:	1f 91       	pop	r17
 2e0:	0f 91       	pop	r16
 2e2:	08 95       	ret

000002e4 <putcharHex>:
		lcd_putch( reg + 0x30 );
	}
}

void putcharHex(unsigned char reg)
{
 2e4:	1f 93       	push	r17
 2e6:	18 2f       	mov	r17, r24
	unsigned char temp;
	
	temp = reg;
	temp>>=4;
 2e8:	82 95       	swap	r24
 2ea:	8f 70       	andi	r24, 0x0F	; 15
	if(temp<10){
 2ec:	8a 30       	cpi	r24, 0x0A	; 10
 2ee:	10 f4       	brcc	.+4      	; 0x2f4 <putcharHex+0x10>
		lcd_putch(temp + 0x30);
 2f0:	80 5d       	subi	r24, 0xD0	; 208
 2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <putcharHex+0x12>
	}else{
		lcd_putch(temp + 0x57);
 2f4:	89 5a       	subi	r24, 0xA9	; 169
 2f6:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
	}

	temp = reg & 0x0f;
 2fa:	81 2f       	mov	r24, r17
 2fc:	8f 70       	andi	r24, 0x0F	; 15
	if(temp<10){
 2fe:	8a 30       	cpi	r24, 0x0A	; 10
 300:	10 f4       	brcc	.+4      	; 0x306 <putcharHex+0x22>
		lcd_putch(temp + 0x30);
 302:	80 5d       	subi	r24, 0xD0	; 208
 304:	01 c0       	rjmp	.+2      	; 0x308 <putcharHex+0x24>
	}else{
		lcd_putch(temp + 0x57);
 306:	89 5a       	subi	r24, 0xA9	; 169
 308:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
	}
}
 30c:	1f 91       	pop	r17
 30e:	08 95       	ret

00000310 <putcharInt>:
	lcdRegWrite(0x01);
	lcdDelay(500);
}

void putcharInt(unsigned char reg)
{
 310:	ff 92       	push	r15
 312:	0f 93       	push	r16
 314:	1f 93       	push	r17
 316:	08 2f       	mov	r16, r24
	unsigned char temp;
	
	if(reg>99){
 318:	84 36       	cpi	r24, 0x64	; 100
 31a:	f0 f0       	brcs	.+60     	; 0x358 <putcharInt+0x48>
		temp = reg / 100;
 31c:	64 e6       	ldi	r22, 0x64	; 100
 31e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <__udivmodqi4>
 322:	18 2f       	mov	r17, r24
		lcd_putch( temp + 0x30 );
 324:	80 5d       	subi	r24, 0xD0	; 208
 326:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
		reg = reg - temp*100;
 32a:	8c e9       	ldi	r24, 0x9C	; 156
 32c:	9f ef       	ldi	r25, 0xFF	; 255
 32e:	18 9f       	mul	r17, r24
 330:	10 2d       	mov	r17, r0
 332:	11 24       	eor	r1, r1
 334:	10 0f       	add	r17, r16
		temp = reg / 10;
 336:	81 2f       	mov	r24, r17
 338:	6a e0       	ldi	r22, 0x0A	; 10
 33a:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <__udivmodqi4>
 33e:	08 2f       	mov	r16, r24
		lcd_putch( temp + 0x30 );
 340:	80 5d       	subi	r24, 0xD0	; 208
 342:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
		reg = reg - temp*10;
		lcd_putch( reg + 0x30 );
 346:	10 5d       	subi	r17, 0xD0	; 208
 348:	86 ef       	ldi	r24, 0xF6	; 246
 34a:	9f ef       	ldi	r25, 0xFF	; 255
 34c:	08 9f       	mul	r16, r24
 34e:	00 2d       	mov	r16, r0
 350:	11 24       	eor	r1, r1
 352:	80 2f       	mov	r24, r16
 354:	81 0f       	add	r24, r17
 356:	1f c0       	rjmp	.+62     	; 0x396 <putcharInt+0x86>
 358:	30 e3       	ldi	r19, 0x30	; 48
 35a:	f3 2e       	mov	r15, r19
 35c:	f8 0e       	add	r15, r24
	}else if(reg>9){
 35e:	8a 30       	cpi	r24, 0x0A	; 10
 360:	98 f0       	brcs	.+38     	; 0x388 <putcharInt+0x78>
		lcd_putch(' ');
 362:	80 e2       	ldi	r24, 0x20	; 32
 364:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
		temp = reg / 10;
 368:	80 2f       	mov	r24, r16
 36a:	6a e0       	ldi	r22, 0x0A	; 10
 36c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <__udivmodqi4>
 370:	18 2f       	mov	r17, r24
		lcd_putch( temp + 0x30 );
 372:	80 5d       	subi	r24, 0xD0	; 208
 374:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
		reg = reg - temp*10;
		lcd_putch( reg + 0x30 );
 378:	86 ef       	ldi	r24, 0xF6	; 246
 37a:	9f ef       	ldi	r25, 0xFF	; 255
 37c:	18 9f       	mul	r17, r24
 37e:	10 2d       	mov	r17, r0
 380:	11 24       	eor	r1, r1
 382:	81 2f       	mov	r24, r17
 384:	8f 0d       	add	r24, r15
 386:	07 c0       	rjmp	.+14     	; 0x396 <putcharInt+0x86>
	}else{
		lcd_putch(' ');
 388:	80 e2       	ldi	r24, 0x20	; 32
 38a:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
		lcd_putch(' ');
 38e:	80 e2       	ldi	r24, 0x20	; 32
 390:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
		lcd_putch( reg + 0x30 );
 394:	8f 2d       	mov	r24, r15
 396:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
	}
}
 39a:	1f 91       	pop	r17
 39c:	0f 91       	pop	r16
 39e:	ff 90       	pop	r15
 3a0:	08 95       	ret

000003a2 <lcd_putss>:
		s++;
	}
}

void lcd_putss(char *s)
{
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	ec 01       	movw	r28, r24
 3a8:	03 c0       	rjmp	.+6      	; 0x3b0 <lcd_putss+0xe>
	while(*s)
	{
        lcd_putch(*s);
 3aa:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
		s++;
 3ae:	21 96       	adiw	r28, 0x01	; 1
	}
}

void lcd_putss(char *s)
{
	while(*s)
 3b0:	88 81       	ld	r24, Y
 3b2:	88 23       	and	r24, r24
 3b4:	d1 f7       	brne	.-12     	; 0x3aa <lcd_putss+0x8>
	{
        lcd_putch(*s);
		s++;
	}
}
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	08 95       	ret

000003bc <lcdClear>:
    lcdClear();
}

void lcdClear(void)
{
	lcdRegWrite(0x01);
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 82 00 	call	0x104	; 0x104 <lcdRegWrite>
	lcdDelay(500);
 3c2:	84 ef       	ldi	r24, 0xF4	; 244
 3c4:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
}
 3c8:	08 95       	ret

000003ca <lcdInit>:
		
	}
}

void lcdInit(void)
{
 3ca:	df 93       	push	r29
 3cc:	cf 93       	push	r28
 3ce:	00 d0       	rcall	.+0      	; 0x3d0 <lcdInit+0x6>
 3d0:	00 d0       	rcall	.+0      	; 0x3d2 <lcdInit+0x8>
 3d2:	00 d0       	rcall	.+0      	; 0x3d4 <lcdInit+0xa>
 3d4:	cd b7       	in	r28, 0x3d	; 61
 3d6:	de b7       	in	r29, 0x3e	; 62
	unsigned char i, lcd_reg[6]={0x38, 0x0c, 0x06};
 3d8:	96 e0       	ldi	r25, 0x06	; 6
 3da:	fe 01       	movw	r30, r28
 3dc:	31 96       	adiw	r30, 0x01	; 1
 3de:	df 01       	movw	r26, r30
 3e0:	89 2f       	mov	r24, r25
 3e2:	1d 92       	st	X+, r1
 3e4:	8a 95       	dec	r24
 3e6:	e9 f7       	brne	.-6      	; 0x3e2 <lcdInit+0x18>
 3e8:	88 e3       	ldi	r24, 0x38	; 56
 3ea:	89 83       	std	Y+1, r24	; 0x01
 3ec:	8c e0       	ldi	r24, 0x0C	; 12
 3ee:	8a 83       	std	Y+2, r24	; 0x02
 3f0:	9b 83       	std	Y+3, r25	; 0x03
	LCD_ENABLE_OFF;
 3f2:	80 91 2a 01 	lds	r24, 0x012A
 3f6:	8b 70       	andi	r24, 0x0B	; 11
 3f8:	e1 e0       	ldi	r30, 0x01	; 1
 3fa:	f0 e8       	ldi	r31, 0x80	; 128
 3fc:	80 83       	st	Z, r24
	LCD_R_W_ON;
 3fe:	98 2f       	mov	r25, r24
 400:	92 60       	ori	r25, 0x02	; 2
 402:	90 83       	st	Z, r25
	LCD_RS_ON;
 404:	83 60       	ori	r24, 0x03	; 3
 406:	80 93 2a 01 	sts	0x012A, r24
 40a:	80 83       	st	Z, r24


	lcdDelay(200);
 40c:	88 ec       	ldi	r24, 0xC8	; 200
 40e:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
	for(i=0; i<3; i++){
		lcdRegWrite(lcd_reg[i]);
 412:	89 81       	ldd	r24, Y+1	; 0x01
 414:	0e 94 82 00 	call	0x104	; 0x104 <lcdRegWrite>
 418:	8a 81       	ldd	r24, Y+2	; 0x02
 41a:	0e 94 82 00 	call	0x104	; 0x104 <lcdRegWrite>
 41e:	86 e0       	ldi	r24, 0x06	; 6
 420:	0e 94 82 00 	call	0x104	; 0x104 <lcdRegWrite>
		//lcdDelay(200);
	}
    lcdClear();
 424:	0e 94 de 01 	call	0x3bc	; 0x3bc <lcdClear>
}
 428:	26 96       	adiw	r28, 0x06	; 6
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	f8 94       	cli
 42e:	de bf       	out	0x3e, r29	; 62
 430:	0f be       	out	0x3f, r0	; 63
 432:	cd bf       	out	0x3d, r28	; 61
 434:	cf 91       	pop	r28
 436:	df 91       	pop	r29
 438:	08 95       	ret

0000043a <lcd_gotoxy>:
// |
// |
// v Y
void lcd_gotoxy(unsigned char x, unsigned char y)
{
	switch(y)
 43a:	61 30       	cpi	r22, 0x01	; 1
 43c:	19 f0       	breq	.+6      	; 0x444 <lcd_gotoxy+0xa>
 43e:	62 30       	cpi	r22, 0x02	; 2
 440:	71 f4       	brne	.+28     	; 0x45e <lcd_gotoxy+0x24>
 442:	07 c0       	rjmp	.+14     	; 0x452 <lcd_gotoxy+0x18>
	{
		case 1:
		{
			lcdRegWrite(0x80+x-1);
 444:	81 58       	subi	r24, 0x81	; 129
 446:	0e 94 82 00 	call	0x104	; 0x104 <lcdRegWrite>
			lcdDelay(30);
 44a:	8e e1       	ldi	r24, 0x1E	; 30
 44c:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
 450:	08 95       	ret
			break; 
		}
		case 2 :
		{
			lcdRegWrite(0xc0+x-1);
 452:	81 54       	subi	r24, 0x41	; 65
 454:	0e 94 82 00 	call	0x104	; 0x104 <lcdRegWrite>
			lcdDelay(30);
 458:	8e e1       	ldi	r24, 0x1E	; 30
 45a:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
 45e:	08 95       	ret

00000460 <lcd_puts>:
void lcd_gotoxy(unsigned char x, unsigned char y);

unsigned char lcd_curser=0, lcd_line=0;

void lcd_puts(char lcd_l, char *s)
{
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
 464:	98 2f       	mov	r25, r24
 466:	eb 01       	movw	r28, r22
   	lcd_gotoxy(1,lcd_l);
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	69 2f       	mov	r22, r25
 46c:	0e 94 1d 02 	call	0x43a	; 0x43a <lcd_gotoxy>
 470:	03 c0       	rjmp	.+6      	; 0x478 <lcd_puts+0x18>
	while(*s)
	{
        lcd_putch(*s);
 472:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
		s++;
 476:	21 96       	adiw	r28, 0x01	; 1
unsigned char lcd_curser=0, lcd_line=0;

void lcd_puts(char lcd_l, char *s)
{
   	lcd_gotoxy(1,lcd_l);
	while(*s)
 478:	88 81       	ld	r24, Y
 47a:	88 23       	and	r24, r24
 47c:	d1 f7       	brne	.-12     	; 0x472 <lcd_puts+0x12>
	{
        lcd_putch(*s);
		s++;
	}
}
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	08 95       	ret

00000484 <secondRow>:
	}
}


void secondRow(void)
{
 484:	1f 93       	push	r17
 486:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char i;
	for(i=0; i<24; i++){
		lcd_putch(0);
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
		lcdDelay(30);
 48e:	8e e1       	ldi	r24, 0x1E	; 30
 490:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>


void secondRow(void)
{
	unsigned char i;
	for(i=0; i<24; i++){
 494:	1f 5f       	subi	r17, 0xFF	; 255
 496:	18 31       	cpi	r17, 0x18	; 24
 498:	b9 f7       	brne	.-18     	; 0x488 <secondRow+0x4>
		lcd_putch(0);
		lcdDelay(30);
	}
}
 49a:	1f 91       	pop	r17
 49c:	08 95       	ret

0000049e <putString>:


void putString(char str[])
{
 49e:	ef 92       	push	r14
 4a0:	ff 92       	push	r15
 4a2:	1f 93       	push	r17
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	7c 01       	movw	r14, r24
 4aa:	10 e0       	ldi	r17, 0x00	; 0
 4ac:	0b c0       	rjmp	.+22     	; 0x4c4 <putString+0x26>
	unsigned char i=0;
	while(str[i]){
		if(i==16){
 4ae:	10 31       	cpi	r17, 0x10	; 16
 4b0:	11 f4       	brne	.+4      	; 0x4b6 <putString+0x18>
			secondRow();
 4b2:	0e 94 42 02 	call	0x484	; 0x484 <secondRow>
		}
		lcd_putch(str[i]);
 4b6:	88 81       	ld	r24, Y
 4b8:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
		lcdDelay(30);
 4bc:	8e e1       	ldi	r24, 0x1E	; 30
 4be:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
		i++;
 4c2:	1f 5f       	subi	r17, 0xFF	; 255


void putString(char str[])
{
	unsigned char i=0;
	while(str[i]){
 4c4:	e7 01       	movw	r28, r14
 4c6:	c1 0f       	add	r28, r17
 4c8:	d1 1d       	adc	r29, r1
 4ca:	88 81       	ld	r24, Y
 4cc:	88 23       	and	r24, r24
 4ce:	79 f7       	brne	.-34     	; 0x4ae <putString+0x10>
		}
		lcd_putch(str[i]);
		lcdDelay(30);
		i++;
	}
}
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	1f 91       	pop	r17
 4d6:	ff 90       	pop	r15
 4d8:	ef 90       	pop	r14
 4da:	08 95       	ret

000004dc <lcdDelayLong>:
{
	unsigned char i, j, k;
	for(i=0; i<80; i++)
		for(j=0; j<50; j++)
			for(k=0; k<d; k++);
 4dc:	08 95       	ret

000004de <port_init>:
#include "lcd.h"
#define EX_LCD_DATA (*(volatile unsigned char *)0x8000)
#define EX_LCD_CONTROL (*(volatile unsigned char *)0x8001)

void port_init(void)
{ PORTA = 0x00;
 4de:	1b ba       	out	0x1b, r1	; 27
	DDRA  = 0xff;
 4e0:	8f ef       	ldi	r24, 0xFF	; 255
 4e2:	8a bb       	out	0x1a, r24	; 26
	PORTB = 0x00;
 4e4:	18 ba       	out	0x18, r1	; 24
	DDRB  = 0x00;
 4e6:	17 ba       	out	0x17, r1	; 23
	PORTC = 0x00; //m103 output only
 4e8:	15 ba       	out	0x15, r1	; 21
	DDRC  = 0x0f;
 4ea:	8f e0       	ldi	r24, 0x0F	; 15
 4ec:	84 bb       	out	0x14, r24	; 20
	PORTD = 0x00;
 4ee:	12 ba       	out	0x12, r1	; 18
	DDRD  = 0x00;
 4f0:	11 ba       	out	0x11, r1	; 17
	PORTE = 0x00;
 4f2:	13 b8       	out	0x03, r1	; 3
	DDRE  = 0x00;
 4f4:	12 b8       	out	0x02, r1	; 2
	PORTF = 0x00;
 4f6:	10 92 62 00 	sts	0x0062, r1
	DDRF  = 0x00;
 4fa:	10 92 61 00 	sts	0x0061, r1
	PORTG = 0x00;
 4fe:	10 92 65 00 	sts	0x0065, r1
	DDRG  = 0x03;
 502:	83 e0       	ldi	r24, 0x03	; 3
 504:	80 93 64 00 	sts	0x0064, r24
}
 508:	08 95       	ret

0000050a <init_devices>:
void init_devices(void)
{  //stop errant interrupts until set up
	cli(); //disable all interrupts
 50a:	f8 94       	cli
	XDIV  = 0x00; //xtal divider
 50c:	1c be       	out	0x3c, r1	; 60
	XMCRA = 0x00; //external memory
 50e:	10 92 6d 00 	sts	0x006D, r1
	port_init();    // UART 0 초기화
 512:	0e 94 6f 02 	call	0x4de	; 0x4de <port_init>
	MCUCR = 0x80;
 516:	80 e8       	ldi	r24, 0x80	; 128
 518:	85 bf       	out	0x35, r24	; 53
	EICRA = 0x00; //extended ext ints
 51a:	10 92 6a 00 	sts	0x006A, r1
	EICRB = 0x00; //extended ext ints
 51e:	1a be       	out	0x3a, r1	; 58
	EIMSK = 0x00;
 520:	19 be       	out	0x39, r1	; 57
	TIMSK = 0x00; //timer interrupt sources
 522:	17 be       	out	0x37, r1	; 55
	ETIMSK = 0x00; //extended timer interrupt sources
 524:	10 92 7d 00 	sts	0x007D, r1
	sei(); //re-enable interrupts
 528:	78 94       	sei
	//all peripherals are now initialized
}
 52a:	08 95       	ret

0000052c <main>:

int main(void)
{
 52c:	0f 93       	push	r16
 52e:	1f 93       	push	r17
 530:	cf 93       	push	r28
 532:	df 93       	push	r29

	static char i, k;
	init_devices();
 534:	0e 94 85 02 	call	0x50a	; 0x50a <init_devices>
	lcdInit();
 538:	0e 94 e5 01 	call	0x3ca	; 0x3ca <lcdInit>
 53c:	88 e8       	ldi	r24, 0x88	; 136
 53e:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 540:	28 e2       	ldi	r18, 0x28	; 40
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	f9 01       	movw	r30, r18
 546:	31 97       	sbiw	r30, 0x01	; 1
 548:	f1 f7       	brne	.-4      	; 0x546 <main+0x1a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 54a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 54c:	d9 f7       	brne	.-10     	; 0x544 <main+0x18>
	_delay_ms(500);
	lcd_puts(1, "Test EEPROM");
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	60 e0       	ldi	r22, 0x00	; 0
 552:	71 e0       	ldi	r23, 0x01	; 1
 554:	0e 94 30 02 	call	0x460	; 0x460 <lcd_puts>
	lcd_puts(2, "Read data");
 558:	82 e0       	ldi	r24, 0x02	; 2
 55a:	6c e0       	ldi	r22, 0x0C	; 12
 55c:	71 e0       	ldi	r23, 0x01	; 1
 55e:	0e 94 30 02 	call	0x460	; 0x460 <lcd_puts>
 562:	c8 e2       	ldi	r28, 0x28	; 40
 564:	d0 e0       	ldi	r29, 0x00	; 0
	while (1)
	{
		eeprom_write_byte(0x0000,'C');
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	63 e4       	ldi	r22, 0x43	; 67
 56c:	0e 94 1b 03 	call	0x636	; 0x636 <__eewr_byte_m128>
		eeprom_write_byte(0x0001,'H');
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	68 e4       	ldi	r22, 0x48	; 72
 576:	0e 94 1b 03 	call	0x636	; 0x636 <__eewr_byte_m128>
		eeprom_write_byte(0x0002,'O');
 57a:	82 e0       	ldi	r24, 0x02	; 2
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	6f e4       	ldi	r22, 0x4F	; 79
 580:	0e 94 1b 03 	call	0x636	; 0x636 <__eewr_byte_m128>
		eeprom_write_byte(0x0003,'I');
 584:	83 e0       	ldi	r24, 0x03	; 3
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	69 e4       	ldi	r22, 0x49	; 73
 58a:	0e 94 1b 03 	call	0x636	; 0x636 <__eewr_byte_m128>
		eeprom_write_byte(0x0004,' ');
 58e:	84 e0       	ldi	r24, 0x04	; 4
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	60 e2       	ldi	r22, 0x20	; 32
 594:	0e 94 1b 03 	call	0x636	; 0x636 <__eewr_byte_m128>
		for (i=0;i<5;i++) {
 598:	10 92 29 01 	sts	0x0129, r1
 59c:	18 c0       	rjmp	.+48     	; 0x5ce <main+0xa2>
			k= eeprom_read_byte(i);
 59e:	81 2f       	mov	r24, r17
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	0e 94 13 03 	call	0x626	; 0x626 <__eerd_byte_m128>
 5a6:	08 2f       	mov	r16, r24
 5a8:	80 93 28 01 	sts	0x0128, r24
 5ac:	80 e1       	ldi	r24, 0x10	; 16
 5ae:	97 e2       	ldi	r25, 0x27	; 39
 5b0:	fe 01       	movw	r30, r28
 5b2:	31 97       	sbiw	r30, 0x01	; 1
 5b4:	f1 f7       	brne	.-4      	; 0x5b2 <main+0x86>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5b8:	d9 f7       	brne	.-10     	; 0x5b0 <main+0x84>
			_delay_ms(1000);
			lcd_gotoxy(12,2);
 5ba:	8c e0       	ldi	r24, 0x0C	; 12
 5bc:	62 e0       	ldi	r22, 0x02	; 2
 5be:	0e 94 1d 02 	call	0x43a	; 0x43a <lcd_gotoxy>
			lcd_putch(k);
 5c2:	80 2f       	mov	r24, r16
 5c4:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
		eeprom_write_byte(0x0000,'C');
		eeprom_write_byte(0x0001,'H');
		eeprom_write_byte(0x0002,'O');
		eeprom_write_byte(0x0003,'I');
		eeprom_write_byte(0x0004,' ');
		for (i=0;i<5;i++) {
 5c8:	1f 5f       	subi	r17, 0xFF	; 255
 5ca:	10 93 29 01 	sts	0x0129, r17
 5ce:	10 91 29 01 	lds	r17, 0x0129
 5d2:	15 30       	cpi	r17, 0x05	; 5
 5d4:	20 f3       	brcs	.-56     	; 0x59e <main+0x72>
 5d6:	80 e1       	ldi	r24, 0x10	; 16
 5d8:	97 e2       	ldi	r25, 0x27	; 39
 5da:	fe 01       	movw	r30, r28
 5dc:	31 97       	sbiw	r30, 0x01	; 1
 5de:	f1 f7       	brne	.-4      	; 0x5dc <main+0xb0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5e0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5e2:	d9 f7       	brne	.-10     	; 0x5da <main+0xae>
 5e4:	c0 cf       	rjmp	.-128    	; 0x566 <main+0x3a>

000005e6 <__udivmodqi4>:
 5e6:	99 1b       	sub	r25, r25
 5e8:	79 e0       	ldi	r23, 0x09	; 9
 5ea:	04 c0       	rjmp	.+8      	; 0x5f4 <__udivmodqi4_ep>

000005ec <__udivmodqi4_loop>:
 5ec:	99 1f       	adc	r25, r25
 5ee:	96 17       	cp	r25, r22
 5f0:	08 f0       	brcs	.+2      	; 0x5f4 <__udivmodqi4_ep>
 5f2:	96 1b       	sub	r25, r22

000005f4 <__udivmodqi4_ep>:
 5f4:	88 1f       	adc	r24, r24
 5f6:	7a 95       	dec	r23
 5f8:	c9 f7       	brne	.-14     	; 0x5ec <__udivmodqi4_loop>
 5fa:	80 95       	com	r24
 5fc:	08 95       	ret

000005fe <__udivmodhi4>:
 5fe:	aa 1b       	sub	r26, r26
 600:	bb 1b       	sub	r27, r27
 602:	51 e1       	ldi	r21, 0x11	; 17
 604:	07 c0       	rjmp	.+14     	; 0x614 <__udivmodhi4_ep>

00000606 <__udivmodhi4_loop>:
 606:	aa 1f       	adc	r26, r26
 608:	bb 1f       	adc	r27, r27
 60a:	a6 17       	cp	r26, r22
 60c:	b7 07       	cpc	r27, r23
 60e:	10 f0       	brcs	.+4      	; 0x614 <__udivmodhi4_ep>
 610:	a6 1b       	sub	r26, r22
 612:	b7 0b       	sbc	r27, r23

00000614 <__udivmodhi4_ep>:
 614:	88 1f       	adc	r24, r24
 616:	99 1f       	adc	r25, r25
 618:	5a 95       	dec	r21
 61a:	a9 f7       	brne	.-22     	; 0x606 <__udivmodhi4_loop>
 61c:	80 95       	com	r24
 61e:	90 95       	com	r25
 620:	bc 01       	movw	r22, r24
 622:	cd 01       	movw	r24, r26
 624:	08 95       	ret

00000626 <__eerd_byte_m128>:
 626:	e1 99       	sbic	0x1c, 1	; 28
 628:	fe cf       	rjmp	.-4      	; 0x626 <__eerd_byte_m128>
 62a:	9f bb       	out	0x1f, r25	; 31
 62c:	8e bb       	out	0x1e, r24	; 30
 62e:	e0 9a       	sbi	0x1c, 0	; 28
 630:	99 27       	eor	r25, r25
 632:	8d b3       	in	r24, 0x1d	; 29
 634:	08 95       	ret

00000636 <__eewr_byte_m128>:
 636:	26 2f       	mov	r18, r22

00000638 <__eewr_r18_m128>:
 638:	e1 99       	sbic	0x1c, 1	; 28
 63a:	fe cf       	rjmp	.-4      	; 0x638 <__eewr_r18_m128>
 63c:	9f bb       	out	0x1f, r25	; 31
 63e:	8e bb       	out	0x1e, r24	; 30
 640:	2d bb       	out	0x1d, r18	; 29
 642:	0f b6       	in	r0, 0x3f	; 63
 644:	f8 94       	cli
 646:	e2 9a       	sbi	0x1c, 2	; 28
 648:	e1 9a       	sbi	0x1c, 1	; 28
 64a:	0f be       	out	0x3f, r0	; 63
 64c:	01 96       	adiw	r24, 0x01	; 1
 64e:	08 95       	ret

00000650 <_exit>:
 650:	f8 94       	cli

00000652 <__stop_program>:
 652:	ff cf       	rjmp	.-2      	; 0x652 <__stop_program>
