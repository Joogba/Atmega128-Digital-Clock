
adc2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000870  00000904  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000870  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800124  00800124  00000928  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001c0  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000062f  00000000  00000000  00000b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000216  00000000  00000000  00001137  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006b2  00000000  00000000  0000134d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  00001a00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000211  00000000  00000000  00001bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000355  00000000  00000000  00001dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002116  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e7       	ldi	r30, 0x70	; 112
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 32       	cpi	r26, 0x24	; 36
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a4 e2       	ldi	r26, 0x24	; 36
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 32       	cpi	r26, 0x27	; 39
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 9e 02 	call	0x53c	; 0x53c <main>
  c6:	0c 94 36 04 	jmp	0x86c	; 0x86c <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <lcdDelay>:
	LCD_ENABLE_OFF;
	lcdDelay(5);
}

void lcdDelay(char d)
{
  ce:	df 93       	push	r29
  d0:	cf 93       	push	r28
  d2:	00 d0       	rcall	.+0      	; 0xd4 <lcdDelay+0x6>
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
  d8:	28 2f       	mov	r18, r24
  da:	0d c0       	rjmp	.+26     	; 0xf6 <lcdDelay+0x28>
	volatile di;
	while(d--)
    	for(di=0; di<2; di++);
  dc:	1a 82       	std	Y+2, r1	; 0x02
  de:	19 82       	std	Y+1, r1	; 0x01
  e0:	05 c0       	rjmp	.+10     	; 0xec <lcdDelay+0x1e>
  e2:	89 81       	ldd	r24, Y+1	; 0x01
  e4:	9a 81       	ldd	r25, Y+2	; 0x02
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	9a 83       	std	Y+2, r25	; 0x02
  ea:	89 83       	std	Y+1, r24	; 0x01
  ec:	89 81       	ldd	r24, Y+1	; 0x01
  ee:	9a 81       	ldd	r25, Y+2	; 0x02
  f0:	02 97       	sbiw	r24, 0x02	; 2
  f2:	bc f3       	brlt	.-18     	; 0xe2 <lcdDelay+0x14>
  f4:	21 50       	subi	r18, 0x01	; 1
}

void lcdDelay(char d)
{
	volatile di;
	while(d--)
  f6:	22 23       	and	r18, r18
  f8:	89 f7       	brne	.-30     	; 0xdc <lcdDelay+0xe>
    	for(di=0; di<2; di++);
}
  fa:	0f 90       	pop	r0
  fc:	0f 90       	pop	r0
  fe:	cf 91       	pop	r28
 100:	df 91       	pop	r29
 102:	08 95       	ret

00000104 <lcdRegWrite>:
	lcd_putn3(number/1000);
	lcd_putn3(number);
}

void lcdRegWrite(unsigned char reg)
{
 104:	ff 92       	push	r15
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	f8 2e       	mov	r15, r24
	LCD_R_W_OFF;
 10c:	80 91 26 01 	lds	r24, 0x0126
 110:	98 2f       	mov	r25, r24
 112:	9d 70       	andi	r25, 0x0D	; 13
 114:	01 e0       	ldi	r16, 0x01	; 1
 116:	10 e8       	ldi	r17, 0x80	; 128
 118:	f8 01       	movw	r30, r16
 11a:	90 83       	st	Z, r25
	LCD_RS_OFF;
 11c:	8c 70       	andi	r24, 0x0C	; 12
 11e:	80 93 26 01 	sts	0x0126, r24
 122:	80 83       	st	Z, r24
	lcdDelay(5);
 124:	85 e0       	ldi	r24, 0x05	; 5
 126:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
	LCD_ENABLE_ON;
 12a:	80 91 26 01 	lds	r24, 0x0126
 12e:	84 60       	ori	r24, 0x04	; 4
 130:	80 93 26 01 	sts	0x0126, r24
 134:	f8 01       	movw	r30, r16
 136:	80 83       	st	Z, r24
	LCD_DATA = reg;
 138:	f0 92 00 80 	sts	0x8000, r15
	lcdDelay(10);
 13c:	8a e0       	ldi	r24, 0x0A	; 10
 13e:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
	LCD_ENABLE_OFF;
 142:	80 91 26 01 	lds	r24, 0x0126
 146:	8b 70       	andi	r24, 0x0B	; 11
 148:	80 93 26 01 	sts	0x0126, r24
 14c:	f8 01       	movw	r30, r16
 14e:	80 83       	st	Z, r24
	lcdDelay(5);
 150:	85 e0       	ldi	r24, 0x05	; 5
 152:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
}
 156:	1f 91       	pop	r17
 158:	0f 91       	pop	r16
 15a:	ff 90       	pop	r15
 15c:	08 95       	ret

0000015e <lcd_putch>:
		lcd_putch(temp + 0x57);
	}
}

void lcd_putch(unsigned char reg)
{
 15e:	ff 92       	push	r15
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	f8 2e       	mov	r15, r24
	LCD_R_W_OFF;
 166:	80 91 26 01 	lds	r24, 0x0126
 16a:	8d 70       	andi	r24, 0x0D	; 13
 16c:	01 e0       	ldi	r16, 0x01	; 1
 16e:	10 e8       	ldi	r17, 0x80	; 128
 170:	f8 01       	movw	r30, r16
 172:	80 83       	st	Z, r24
	LCD_RS_ON;
 174:	81 60       	ori	r24, 0x01	; 1
 176:	80 93 26 01 	sts	0x0126, r24
 17a:	80 83       	st	Z, r24
	lcdDelay(5);
 17c:	85 e0       	ldi	r24, 0x05	; 5
 17e:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
	LCD_ENABLE_ON;
 182:	80 91 26 01 	lds	r24, 0x0126
 186:	84 60       	ori	r24, 0x04	; 4
 188:	80 93 26 01 	sts	0x0126, r24
 18c:	f8 01       	movw	r30, r16
 18e:	80 83       	st	Z, r24
	LCD_DATA = reg;
 190:	f0 92 00 80 	sts	0x8000, r15
	lcdDelay(10);
 194:	8a e0       	ldi	r24, 0x0A	; 10
 196:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
	LCD_ENABLE_OFF;
 19a:	80 91 26 01 	lds	r24, 0x0126
 19e:	8b 70       	andi	r24, 0x0B	; 11
 1a0:	80 93 26 01 	sts	0x0126, r24
 1a4:	f8 01       	movw	r30, r16
 1a6:	80 83       	st	Z, r24
	lcdDelay(5);
 1a8:	85 e0       	ldi	r24, 0x05	; 5
 1aa:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
}
 1ae:	1f 91       	pop	r17
 1b0:	0f 91       	pop	r16
 1b2:	ff 90       	pop	r15
 1b4:	08 95       	ret

000001b6 <lcd_putn3>:
//	lcd_putch(hex_char[number&0x0f]);
	lcd_putch((number&0x0f)+'0');
}
//-사용자- 3자리 숫자 출력 예)012
void lcd_putn3(unsigned int number)
{
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
	number%=1000;
 1ba:	68 ee       	ldi	r22, 0xE8	; 232
 1bc:	73 e0       	ldi	r23, 0x03	; 3
 1be:	0e 94 22 04 	call	0x844	; 0x844 <__udivmodhi4>
 1c2:	18 2f       	mov	r17, r24
 1c4:	09 2f       	mov	r16, r25
	lcd_putch(number/100+'0');
 1c6:	64 e6       	ldi	r22, 0x64	; 100
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	0e 94 22 04 	call	0x844	; 0x844 <__udivmodhi4>
 1ce:	86 2f       	mov	r24, r22
 1d0:	80 5d       	subi	r24, 0xD0	; 208
 1d2:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
	number%=100;
 1d6:	81 2f       	mov	r24, r17
 1d8:	90 2f       	mov	r25, r16
 1da:	64 e6       	ldi	r22, 0x64	; 100
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	0e 94 22 04 	call	0x844	; 0x844 <__udivmodhi4>
 1e2:	18 2f       	mov	r17, r24
 1e4:	09 2f       	mov	r16, r25
	lcd_putch(number/10+'0');
 1e6:	6a e0       	ldi	r22, 0x0A	; 10
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	0e 94 22 04 	call	0x844	; 0x844 <__udivmodhi4>
 1ee:	86 2f       	mov	r24, r22
 1f0:	80 5d       	subi	r24, 0xD0	; 208
 1f2:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
	number%=10;
	lcd_putch(number+'0');
 1f6:	81 2f       	mov	r24, r17
 1f8:	90 2f       	mov	r25, r16
 1fa:	6a e0       	ldi	r22, 0x0A	; 10
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	0e 94 22 04 	call	0x844	; 0x844 <__udivmodhi4>
 202:	80 5d       	subi	r24, 0xD0	; 208
 204:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
}
 208:	1f 91       	pop	r17
 20a:	0f 91       	pop	r16
 20c:	08 95       	ret

0000020e <lcd_putn6>:
	lcd_putn2(number/1000);
	lcd_putn3(number);
}
//-사용자- 6자리 숫자 출력 예)001234
void lcd_putn6(unsigned int number)
{
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	8c 01       	movw	r16, r24
	lcd_putn3(number/1000);
 214:	68 ee       	ldi	r22, 0xE8	; 232
 216:	73 e0       	ldi	r23, 0x03	; 3
 218:	0e 94 22 04 	call	0x844	; 0x844 <__udivmodhi4>
 21c:	cb 01       	movw	r24, r22
 21e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_putn3>
	lcd_putn3(number);
 222:	c8 01       	movw	r24, r16
 224:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_putn3>
}
 228:	1f 91       	pop	r17
 22a:	0f 91       	pop	r16
 22c:	08 95       	ret

0000022e <lcd_puth2>:
	number%=10;
	lcd_putch(number+'0');
}
unsigned char hex_char[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'}; 
void lcd_puth2(unsigned int number)
{
 22e:	0f 93       	push	r16
 230:	1f 93       	push	r17
	number%=100;
 232:	64 e6       	ldi	r22, 0x64	; 100
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	0e 94 22 04 	call	0x844	; 0x844 <__udivmodhi4>
 23a:	8c 01       	movw	r16, r24
	lcd_putch((number/16)+'0');
 23c:	24 e0       	ldi	r18, 0x04	; 4
 23e:	96 95       	lsr	r25
 240:	87 95       	ror	r24
 242:	2a 95       	dec	r18
 244:	e1 f7       	brne	.-8      	; 0x23e <lcd_puth2+0x10>
 246:	80 5d       	subi	r24, 0xD0	; 208
 248:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
//	number%=10;
//	lcd_putch(hex_char[number&0x0f]);
	lcd_putch((number&0x0f)+'0');
 24c:	0f 70       	andi	r16, 0x0F	; 15
 24e:	80 2f       	mov	r24, r16
 250:	80 5d       	subi	r24, 0xD0	; 208
 252:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
}
 256:	1f 91       	pop	r17
 258:	0f 91       	pop	r16
 25a:	08 95       	ret

0000025c <lcd_putn2>:
{
	number%=10;
	lcd_putch(number+'0');
}
void lcd_putn2(unsigned int number)
{
 25c:	0f 93       	push	r16
 25e:	1f 93       	push	r17
	number%=100;
 260:	64 e6       	ldi	r22, 0x64	; 100
 262:	70 e0       	ldi	r23, 0x00	; 0
 264:	0e 94 22 04 	call	0x844	; 0x844 <__udivmodhi4>
 268:	18 2f       	mov	r17, r24
 26a:	09 2f       	mov	r16, r25
	lcd_putch(number/10+'0');
 26c:	6a e0       	ldi	r22, 0x0A	; 10
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	0e 94 22 04 	call	0x844	; 0x844 <__udivmodhi4>
 274:	86 2f       	mov	r24, r22
 276:	80 5d       	subi	r24, 0xD0	; 208
 278:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
	number%=10;
	lcd_putch(number+'0');
 27c:	81 2f       	mov	r24, r17
 27e:	90 2f       	mov	r25, r16
 280:	6a e0       	ldi	r22, 0x0A	; 10
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	0e 94 22 04 	call	0x844	; 0x844 <__udivmodhi4>
 288:	80 5d       	subi	r24, 0xD0	; 208
 28a:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
}
 28e:	1f 91       	pop	r17
 290:	0f 91       	pop	r16
 292:	08 95       	ret

00000294 <lcd_putn5>:
{
	lcd_putn1(number/1000);
	lcd_putn3(number);
}
void lcd_putn5(unsigned int number)
{
 294:	0f 93       	push	r16
 296:	1f 93       	push	r17
 298:	8c 01       	movw	r16, r24
	lcd_putn2(number/1000);
 29a:	68 ee       	ldi	r22, 0xE8	; 232
 29c:	73 e0       	ldi	r23, 0x03	; 3
 29e:	0e 94 22 04 	call	0x844	; 0x844 <__udivmodhi4>
 2a2:	cb 01       	movw	r24, r22
 2a4:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_putn2>
	lcd_putn3(number);
 2a8:	c8 01       	movw	r24, r16
 2aa:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_putn3>
}
 2ae:	1f 91       	pop	r17
 2b0:	0f 91       	pop	r16
 2b2:	08 95       	ret

000002b4 <lcd_putn1>:
}

void lcd_putn1(unsigned int number)
{
	number%=10;
	lcd_putch(number+'0');
 2b4:	6a e0       	ldi	r22, 0x0A	; 10
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	0e 94 22 04 	call	0x844	; 0x844 <__udivmodhi4>
 2bc:	80 5d       	subi	r24, 0xD0	; 208
 2be:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
}
 2c2:	08 95       	ret

000002c4 <lcd_putn4>:
	lcd_putch(number/10+'0');
	number%=10;
	lcd_putch(number+'0');
}
void lcd_putn4(unsigned int number)
{
 2c4:	0f 93       	push	r16
 2c6:	1f 93       	push	r17
 2c8:	8c 01       	movw	r16, r24
	lcd_putn1(number/1000);
 2ca:	68 ee       	ldi	r22, 0xE8	; 232
 2cc:	73 e0       	ldi	r23, 0x03	; 3
 2ce:	0e 94 22 04 	call	0x844	; 0x844 <__udivmodhi4>
 2d2:	cb 01       	movw	r24, r22
 2d4:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_putn1>
	lcd_putn3(number);
 2d8:	c8 01       	movw	r24, r16
 2da:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_putn3>
}
 2de:	1f 91       	pop	r17
 2e0:	0f 91       	pop	r16
 2e2:	08 95       	ret

000002e4 <putcharHex>:
		lcd_putch( reg + 0x30 );
	}
}

void putcharHex(unsigned char reg)
{
 2e4:	1f 93       	push	r17
 2e6:	18 2f       	mov	r17, r24
	unsigned char temp;
	
	temp = reg;
	temp>>=4;
 2e8:	82 95       	swap	r24
 2ea:	8f 70       	andi	r24, 0x0F	; 15
	if(temp<10){
 2ec:	8a 30       	cpi	r24, 0x0A	; 10
 2ee:	10 f4       	brcc	.+4      	; 0x2f4 <putcharHex+0x10>
		lcd_putch(temp + 0x30);
 2f0:	80 5d       	subi	r24, 0xD0	; 208
 2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <putcharHex+0x12>
	}else{
		lcd_putch(temp + 0x57);
 2f4:	89 5a       	subi	r24, 0xA9	; 169
 2f6:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
	}

	temp = reg & 0x0f;
 2fa:	81 2f       	mov	r24, r17
 2fc:	8f 70       	andi	r24, 0x0F	; 15
	if(temp<10){
 2fe:	8a 30       	cpi	r24, 0x0A	; 10
 300:	10 f4       	brcc	.+4      	; 0x306 <putcharHex+0x22>
		lcd_putch(temp + 0x30);
 302:	80 5d       	subi	r24, 0xD0	; 208
 304:	01 c0       	rjmp	.+2      	; 0x308 <putcharHex+0x24>
	}else{
		lcd_putch(temp + 0x57);
 306:	89 5a       	subi	r24, 0xA9	; 169
 308:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
	}
}
 30c:	1f 91       	pop	r17
 30e:	08 95       	ret

00000310 <putcharInt>:
	lcdRegWrite(0x01);
	lcdDelay(500);
}

void putcharInt(unsigned char reg)
{
 310:	ff 92       	push	r15
 312:	0f 93       	push	r16
 314:	1f 93       	push	r17
 316:	08 2f       	mov	r16, r24
	unsigned char temp;
	
	if(reg>99){
 318:	84 36       	cpi	r24, 0x64	; 100
 31a:	f0 f0       	brcs	.+60     	; 0x358 <putcharInt+0x48>
		temp = reg / 100;
 31c:	64 e6       	ldi	r22, 0x64	; 100
 31e:	0e 94 16 04 	call	0x82c	; 0x82c <__udivmodqi4>
 322:	18 2f       	mov	r17, r24
		lcd_putch( temp + 0x30 );
 324:	80 5d       	subi	r24, 0xD0	; 208
 326:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
		reg = reg - temp*100;
 32a:	8c e9       	ldi	r24, 0x9C	; 156
 32c:	9f ef       	ldi	r25, 0xFF	; 255
 32e:	18 9f       	mul	r17, r24
 330:	10 2d       	mov	r17, r0
 332:	11 24       	eor	r1, r1
 334:	10 0f       	add	r17, r16
		temp = reg / 10;
 336:	81 2f       	mov	r24, r17
 338:	6a e0       	ldi	r22, 0x0A	; 10
 33a:	0e 94 16 04 	call	0x82c	; 0x82c <__udivmodqi4>
 33e:	08 2f       	mov	r16, r24
		lcd_putch( temp + 0x30 );
 340:	80 5d       	subi	r24, 0xD0	; 208
 342:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
		reg = reg - temp*10;
		lcd_putch( reg + 0x30 );
 346:	10 5d       	subi	r17, 0xD0	; 208
 348:	86 ef       	ldi	r24, 0xF6	; 246
 34a:	9f ef       	ldi	r25, 0xFF	; 255
 34c:	08 9f       	mul	r16, r24
 34e:	00 2d       	mov	r16, r0
 350:	11 24       	eor	r1, r1
 352:	80 2f       	mov	r24, r16
 354:	81 0f       	add	r24, r17
 356:	1f c0       	rjmp	.+62     	; 0x396 <putcharInt+0x86>
 358:	30 e3       	ldi	r19, 0x30	; 48
 35a:	f3 2e       	mov	r15, r19
 35c:	f8 0e       	add	r15, r24
	}else if(reg>9){
 35e:	8a 30       	cpi	r24, 0x0A	; 10
 360:	98 f0       	brcs	.+38     	; 0x388 <putcharInt+0x78>
		lcd_putch(' ');
 362:	80 e2       	ldi	r24, 0x20	; 32
 364:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
		temp = reg / 10;
 368:	80 2f       	mov	r24, r16
 36a:	6a e0       	ldi	r22, 0x0A	; 10
 36c:	0e 94 16 04 	call	0x82c	; 0x82c <__udivmodqi4>
 370:	18 2f       	mov	r17, r24
		lcd_putch( temp + 0x30 );
 372:	80 5d       	subi	r24, 0xD0	; 208
 374:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
		reg = reg - temp*10;
		lcd_putch( reg + 0x30 );
 378:	86 ef       	ldi	r24, 0xF6	; 246
 37a:	9f ef       	ldi	r25, 0xFF	; 255
 37c:	18 9f       	mul	r17, r24
 37e:	10 2d       	mov	r17, r0
 380:	11 24       	eor	r1, r1
 382:	81 2f       	mov	r24, r17
 384:	8f 0d       	add	r24, r15
 386:	07 c0       	rjmp	.+14     	; 0x396 <putcharInt+0x86>
	}else{
		lcd_putch(' ');
 388:	80 e2       	ldi	r24, 0x20	; 32
 38a:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
		lcd_putch(' ');
 38e:	80 e2       	ldi	r24, 0x20	; 32
 390:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
		lcd_putch( reg + 0x30 );
 394:	8f 2d       	mov	r24, r15
 396:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
	}
}
 39a:	1f 91       	pop	r17
 39c:	0f 91       	pop	r16
 39e:	ff 90       	pop	r15
 3a0:	08 95       	ret

000003a2 <lcd_putss>:
		s++;
	}
}

void lcd_putss(char *s)
{
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	ec 01       	movw	r28, r24
 3a8:	03 c0       	rjmp	.+6      	; 0x3b0 <lcd_putss+0xe>
	while(*s)
	{
        lcd_putch(*s);
 3aa:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
		s++;
 3ae:	21 96       	adiw	r28, 0x01	; 1
	}
}

void lcd_putss(char *s)
{
	while(*s)
 3b0:	88 81       	ld	r24, Y
 3b2:	88 23       	and	r24, r24
 3b4:	d1 f7       	brne	.-12     	; 0x3aa <lcd_putss+0x8>
	{
        lcd_putch(*s);
		s++;
	}
}
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	08 95       	ret

000003bc <lcdClear>:
    lcdClear();
}

void lcdClear(void)
{
	lcdRegWrite(0x01);
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 82 00 	call	0x104	; 0x104 <lcdRegWrite>
	lcdDelay(500);
 3c2:	84 ef       	ldi	r24, 0xF4	; 244
 3c4:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
}
 3c8:	08 95       	ret

000003ca <lcdInit>:
		
	}
}

void lcdInit(void)
{
 3ca:	df 93       	push	r29
 3cc:	cf 93       	push	r28
 3ce:	00 d0       	rcall	.+0      	; 0x3d0 <lcdInit+0x6>
 3d0:	00 d0       	rcall	.+0      	; 0x3d2 <lcdInit+0x8>
 3d2:	00 d0       	rcall	.+0      	; 0x3d4 <lcdInit+0xa>
 3d4:	cd b7       	in	r28, 0x3d	; 61
 3d6:	de b7       	in	r29, 0x3e	; 62
	unsigned char i, lcd_reg[6]={0x38, 0x0c, 0x06};
 3d8:	96 e0       	ldi	r25, 0x06	; 6
 3da:	fe 01       	movw	r30, r28
 3dc:	31 96       	adiw	r30, 0x01	; 1
 3de:	df 01       	movw	r26, r30
 3e0:	89 2f       	mov	r24, r25
 3e2:	1d 92       	st	X+, r1
 3e4:	8a 95       	dec	r24
 3e6:	e9 f7       	brne	.-6      	; 0x3e2 <lcdInit+0x18>
 3e8:	88 e3       	ldi	r24, 0x38	; 56
 3ea:	89 83       	std	Y+1, r24	; 0x01
 3ec:	8c e0       	ldi	r24, 0x0C	; 12
 3ee:	8a 83       	std	Y+2, r24	; 0x02
 3f0:	9b 83       	std	Y+3, r25	; 0x03
	LCD_ENABLE_OFF;
 3f2:	80 91 26 01 	lds	r24, 0x0126
 3f6:	8b 70       	andi	r24, 0x0B	; 11
 3f8:	e1 e0       	ldi	r30, 0x01	; 1
 3fa:	f0 e8       	ldi	r31, 0x80	; 128
 3fc:	80 83       	st	Z, r24
	LCD_R_W_ON;
 3fe:	98 2f       	mov	r25, r24
 400:	92 60       	ori	r25, 0x02	; 2
 402:	90 83       	st	Z, r25
	LCD_RS_ON;
 404:	83 60       	ori	r24, 0x03	; 3
 406:	80 93 26 01 	sts	0x0126, r24
 40a:	80 83       	st	Z, r24


	lcdDelay(200);
 40c:	88 ec       	ldi	r24, 0xC8	; 200
 40e:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
	for(i=0; i<3; i++){
		lcdRegWrite(lcd_reg[i]);
 412:	89 81       	ldd	r24, Y+1	; 0x01
 414:	0e 94 82 00 	call	0x104	; 0x104 <lcdRegWrite>
 418:	8a 81       	ldd	r24, Y+2	; 0x02
 41a:	0e 94 82 00 	call	0x104	; 0x104 <lcdRegWrite>
 41e:	86 e0       	ldi	r24, 0x06	; 6
 420:	0e 94 82 00 	call	0x104	; 0x104 <lcdRegWrite>
		//lcdDelay(200);
	}
    lcdClear();
 424:	0e 94 de 01 	call	0x3bc	; 0x3bc <lcdClear>
}
 428:	26 96       	adiw	r28, 0x06	; 6
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	f8 94       	cli
 42e:	de bf       	out	0x3e, r29	; 62
 430:	0f be       	out	0x3f, r0	; 63
 432:	cd bf       	out	0x3d, r28	; 61
 434:	cf 91       	pop	r28
 436:	df 91       	pop	r29
 438:	08 95       	ret

0000043a <lcd_gotoxy>:
// |
// |
// v Y
void lcd_gotoxy(unsigned char x, unsigned char y)
{
	switch(y)
 43a:	61 30       	cpi	r22, 0x01	; 1
 43c:	19 f0       	breq	.+6      	; 0x444 <lcd_gotoxy+0xa>
 43e:	62 30       	cpi	r22, 0x02	; 2
 440:	71 f4       	brne	.+28     	; 0x45e <lcd_gotoxy+0x24>
 442:	07 c0       	rjmp	.+14     	; 0x452 <lcd_gotoxy+0x18>
	{
		case 1:
		{
			lcdRegWrite(0x80+x-1);
 444:	81 58       	subi	r24, 0x81	; 129
 446:	0e 94 82 00 	call	0x104	; 0x104 <lcdRegWrite>
			lcdDelay(30);
 44a:	8e e1       	ldi	r24, 0x1E	; 30
 44c:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
 450:	08 95       	ret
			break; 
		}
		case 2 :
		{
			lcdRegWrite(0xc0+x-1);
 452:	81 54       	subi	r24, 0x41	; 65
 454:	0e 94 82 00 	call	0x104	; 0x104 <lcdRegWrite>
			lcdDelay(30);
 458:	8e e1       	ldi	r24, 0x1E	; 30
 45a:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
 45e:	08 95       	ret

00000460 <lcd_puts>:
void lcd_gotoxy(unsigned char x, unsigned char y);

unsigned char lcd_curser=0, lcd_line=0;

void lcd_puts(char lcd_l, char *s)
{
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
 464:	98 2f       	mov	r25, r24
 466:	eb 01       	movw	r28, r22
   	lcd_gotoxy(1,lcd_l);
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	69 2f       	mov	r22, r25
 46c:	0e 94 1d 02 	call	0x43a	; 0x43a <lcd_gotoxy>
 470:	03 c0       	rjmp	.+6      	; 0x478 <lcd_puts+0x18>
	while(*s)
	{
        lcd_putch(*s);
 472:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
		s++;
 476:	21 96       	adiw	r28, 0x01	; 1
unsigned char lcd_curser=0, lcd_line=0;

void lcd_puts(char lcd_l, char *s)
{
   	lcd_gotoxy(1,lcd_l);
	while(*s)
 478:	88 81       	ld	r24, Y
 47a:	88 23       	and	r24, r24
 47c:	d1 f7       	brne	.-12     	; 0x472 <lcd_puts+0x12>
	{
        lcd_putch(*s);
		s++;
	}
}
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	08 95       	ret

00000484 <secondRow>:
	}
}


void secondRow(void)
{
 484:	1f 93       	push	r17
 486:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char i;
	for(i=0; i<24; i++){
		lcd_putch(0);
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
		lcdDelay(30);
 48e:	8e e1       	ldi	r24, 0x1E	; 30
 490:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>


void secondRow(void)
{
	unsigned char i;
	for(i=0; i<24; i++){
 494:	1f 5f       	subi	r17, 0xFF	; 255
 496:	18 31       	cpi	r17, 0x18	; 24
 498:	b9 f7       	brne	.-18     	; 0x488 <secondRow+0x4>
		lcd_putch(0);
		lcdDelay(30);
	}
}
 49a:	1f 91       	pop	r17
 49c:	08 95       	ret

0000049e <putString>:


void putString(char str[])
{
 49e:	ef 92       	push	r14
 4a0:	ff 92       	push	r15
 4a2:	1f 93       	push	r17
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	7c 01       	movw	r14, r24
 4aa:	10 e0       	ldi	r17, 0x00	; 0
 4ac:	0b c0       	rjmp	.+22     	; 0x4c4 <putString+0x26>
	unsigned char i=0;
	while(str[i]){
		if(i==16){
 4ae:	10 31       	cpi	r17, 0x10	; 16
 4b0:	11 f4       	brne	.+4      	; 0x4b6 <putString+0x18>
			secondRow();
 4b2:	0e 94 42 02 	call	0x484	; 0x484 <secondRow>
		}
		lcd_putch(str[i]);
 4b6:	88 81       	ld	r24, Y
 4b8:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putch>
		lcdDelay(30);
 4bc:	8e e1       	ldi	r24, 0x1E	; 30
 4be:	0e 94 67 00 	call	0xce	; 0xce <lcdDelay>
		i++;
 4c2:	1f 5f       	subi	r17, 0xFF	; 255


void putString(char str[])
{
	unsigned char i=0;
	while(str[i]){
 4c4:	e7 01       	movw	r28, r14
 4c6:	c1 0f       	add	r28, r17
 4c8:	d1 1d       	adc	r29, r1
 4ca:	88 81       	ld	r24, Y
 4cc:	88 23       	and	r24, r24
 4ce:	79 f7       	brne	.-34     	; 0x4ae <putString+0x10>
		}
		lcd_putch(str[i]);
		lcdDelay(30);
		i++;
	}
}
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	1f 91       	pop	r17
 4d6:	ff 90       	pop	r15
 4d8:	ef 90       	pop	r14
 4da:	08 95       	ret

000004dc <lcdDelayLong>:
{
	unsigned char i, j, k;
	for(i=0; i<80; i++)
		for(j=0; j<50; j++)
			for(k=0; k<d; k++);
 4dc:	08 95       	ret

000004de <adc_init>:



void adc_init(void)
{
	ADCSRA = 0x00; // disable adc
 4de:	16 b8       	out	0x06, r1	; 6
	ADMUX = 0x00; // select adc input 0;
 4e0:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0x87; // adc enable, 분주 128 // 10000111
 4e2:	87 e8       	ldi	r24, 0x87	; 135
 4e4:	86 b9       	out	0x06, r24	; 6
	// adc 를 위한 주파수 = 16mhz / 128 = 125 khz
}
 4e6:	08 95       	ret

000004e8 <adc_startConversion>:

void adc_startConversion(void)
{
	ADCSRA &= 0x07; // 128 분주비 사용 111
 4e8:	86 b1       	in	r24, 0x06	; 6
 4ea:	87 70       	andi	r24, 0x07	; 7
 4ec:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x02;
 4ee:	82 e0       	ldi	r24, 0x02	; 2
 4f0:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 0xc0; // adc ON 11000000
 4f2:	86 b1       	in	r24, 0x06	; 6
 4f4:	80 6c       	ori	r24, 0xC0	; 192
 4f6:	86 b9       	out	0x06, r24	; 6
}
 4f8:	08 95       	ret

000004fa <adc_readData>:

unsigned int adc_readData(void)
{
 4fa:	df 93       	push	r29
 4fc:	cf 93       	push	r28
 4fe:	00 d0       	rcall	.+0      	; 0x500 <adc_readData+0x6>
 500:	cd b7       	in	r28, 0x3d	; 61
 502:	de b7       	in	r29, 0x3e	; 62
	
	volatile unsigned int adc_temp;
	while((ADCSRA & 0x10) == 0); // 변환 완료까지 기다림
 504:	34 9b       	sbis	0x06, 4	; 6
 506:	fe cf       	rjmp	.-4      	; 0x504 <adc_readData+0xa>
	adc_temp=(int)ADCL+(int)ADCH*256;
 508:	34 b1       	in	r19, 0x04	; 4
 50a:	25 b1       	in	r18, 0x05	; 5
 50c:	92 2f       	mov	r25, r18
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	83 0f       	add	r24, r19
 512:	91 1d       	adc	r25, r1
 514:	9a 83       	std	Y+2, r25	; 0x02
 516:	89 83       	std	Y+1, r24	; 0x01
	// ADCSRA = ADCSRA | 0x10
	return adc_temp;
 518:	29 81       	ldd	r18, Y+1	; 0x01
 51a:	3a 81       	ldd	r19, Y+2	; 0x02
}
 51c:	c9 01       	movw	r24, r18
 51e:	0f 90       	pop	r0
 520:	0f 90       	pop	r0
 522:	cf 91       	pop	r28
 524:	df 91       	pop	r29
 526:	08 95       	ret

00000528 <port_init>:

void port_init(void)
{
	PORTB = 0x00;
 528:	18 ba       	out	0x18, r1	; 24
	DDRB  = 0x00;
 52a:	17 ba       	out	0x17, r1	; 23
}
 52c:	08 95       	ret

0000052e <init_devices>:

void init_devices(void)
{
	CLI();
 52e:	f8 94       	cli
	return adc_temp;
}

void port_init(void)
{
	PORTB = 0x00;
 530:	18 ba       	out	0x18, r1	; 24
	DDRB  = 0x00;
 532:	17 ba       	out	0x17, r1	; 23

void init_devices(void)
{
	CLI();
	port_init();
	MCUCR = 0x80;
 534:	80 e8       	ldi	r24, 0x80	; 128
 536:	85 bf       	out	0x35, r24	; 53
	SEI();
 538:	78 94       	sei
}
 53a:	08 95       	ret

0000053c <main>:

int main()
{
 53c:	df 92       	push	r13
 53e:	ef 92       	push	r14
 540:	ff 92       	push	r15
 542:	0f 93       	push	r16
 544:	1f 93       	push	r17
 546:	cf 93       	push	r28
 548:	df 93       	push	r29
	DDRB  = 0x00;
}

void init_devices(void)
{
	CLI();
 54a:	f8 94       	cli
	return adc_temp;
}

void port_init(void)
{
	PORTB = 0x00;
 54c:	18 ba       	out	0x18, r1	; 24
	DDRB  = 0x00;
 54e:	17 ba       	out	0x17, r1	; 23

void init_devices(void)
{
	CLI();
	port_init();
	MCUCR = 0x80;
 550:	80 e8       	ldi	r24, 0x80	; 128
 552:	85 bf       	out	0x35, r24	; 53
	SEI();
 554:	78 94       	sei



void adc_init(void)
{
	ADCSRA = 0x00; // disable adc
 556:	16 b8       	out	0x06, r1	; 6
	ADMUX = 0x00; // select adc input 0;
 558:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0x87; // adc enable, 분주 128 // 10000111
 55a:	87 e8       	ldi	r24, 0x87	; 135
 55c:	86 b9       	out	0x06, r24	; 6
	unsigned int adc_data, ah0, al0;
	float voltage,tempo;
	init_devices();
	adc_init();
	
	lcd_puts(1," adc test");
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	60 e0       	ldi	r22, 0x00	; 0
 562:	71 e0       	ldi	r23, 0x01	; 1
 564:	0e 94 30 02 	call	0x460	; 0x460 <lcd_puts>
	lcd_puts(2," adc res.");
 568:	82 e0       	ldi	r24, 0x02	; 2
 56a:	6a e0       	ldi	r22, 0x0A	; 10
 56c:	71 e0       	ldi	r23, 0x01	; 1
 56e:	0e 94 30 02 	call	0x460	; 0x460 <lcd_puts>
}

void adc_startConversion(void)
{
	ADCSRA &= 0x07; // 128 분주비 사용 111
	ADMUX = 0x02;
 572:	42 e0       	ldi	r20, 0x02	; 2
 574:	d4 2e       	mov	r13, r20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 576:	c8 e2       	ldi	r28, 0x28	; 40
 578:	d0 e0       	ldi	r29, 0x00	; 0
	// adc 를 위한 주파수 = 16mhz / 128 = 125 khz
}

void adc_startConversion(void)
{
	ADCSRA &= 0x07; // 128 분주비 사용 111
 57a:	86 b1       	in	r24, 0x06	; 6
 57c:	87 70       	andi	r24, 0x07	; 7
 57e:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x02;
 580:	d7 b8       	out	0x07, r13	; 7
	ADCSRA |= 0xc0; // adc ON 11000000
 582:	86 b1       	in	r24, 0x06	; 6
 584:	80 6c       	ori	r24, 0xC0	; 192
 586:	86 b9       	out	0x06, r24	; 6
	lcd_puts(2," adc res.");
	
	while(1)
	{
		adc_startConversion();
		adc_data = adc_readData();
 588:	0e 94 7d 02 	call	0x4fa	; 0x4fa <adc_readData>
 58c:	7c 01       	movw	r14, r24
		tempo = (float)(5.*adc_data*100.)/1024.;
		
		lcd_gotoxy(2,2);
 58e:	82 e0       	ldi	r24, 0x02	; 2
 590:	62 e0       	ldi	r22, 0x02	; 2
 592:	0e 94 1d 02 	call	0x43a	; 0x43a <lcd_gotoxy>
		lcd_putn4(tempo); // 0998
 596:	00 e0       	ldi	r16, 0x00	; 0
 598:	10 e0       	ldi	r17, 0x00	; 0
 59a:	c8 01       	movw	r24, r16
 59c:	b7 01       	movw	r22, r14
 59e:	0e 94 25 03 	call	0x64a	; 0x64a <__floatunsisf>
 5a2:	20 e0       	ldi	r18, 0x00	; 0
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	40 ea       	ldi	r20, 0xA0	; 160
 5a8:	50 e4       	ldi	r21, 0x40	; 64
 5aa:	0e 94 8b 03 	call	0x716	; 0x716 <__mulsf3>
 5ae:	20 e0       	ldi	r18, 0x00	; 0
 5b0:	30 e0       	ldi	r19, 0x00	; 0
 5b2:	48 ec       	ldi	r20, 0xC8	; 200
 5b4:	52 e4       	ldi	r21, 0x42	; 66
 5b6:	0e 94 8b 03 	call	0x716	; 0x716 <__mulsf3>
 5ba:	20 e0       	ldi	r18, 0x00	; 0
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	40 e8       	ldi	r20, 0x80	; 128
 5c0:	5a e3       	ldi	r21, 0x3A	; 58
 5c2:	0e 94 8b 03 	call	0x716	; 0x716 <__mulsf3>
 5c6:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__fixunssfsi>
 5ca:	7b 01       	movw	r14, r22
 5cc:	8c 01       	movw	r16, r24
 5ce:	cb 01       	movw	r24, r22
 5d0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_putn4>
		lcd_gotoxy(10,2);
 5d4:	8a e0       	ldi	r24, 0x0A	; 10
 5d6:	62 e0       	ldi	r22, 0x02	; 2
 5d8:	0e 94 1d 02 	call	0x43a	; 0x43a <lcd_gotoxy>
		lcd_putn4(tempo); //48738
 5dc:	c7 01       	movw	r24, r14
 5de:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_putn4>
 5e2:	88 e8       	ldi	r24, 0x88	; 136
 5e4:	93 e1       	ldi	r25, 0x13	; 19
 5e6:	fe 01       	movw	r30, r28
 5e8:	31 97       	sbiw	r30, 0x01	; 1
 5ea:	f1 f7       	brne	.-4      	; 0x5e8 <main+0xac>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5ee:	d9 f7       	brne	.-10     	; 0x5e6 <main+0xaa>
 5f0:	c4 cf       	rjmp	.-120    	; 0x57a <main+0x3e>

000005f2 <__fixunssfsi>:
 5f2:	70 d0       	rcall	.+224    	; 0x6d4 <__fp_splitA>
 5f4:	88 f0       	brcs	.+34     	; 0x618 <__fixunssfsi+0x26>
 5f6:	9f 57       	subi	r25, 0x7F	; 127
 5f8:	90 f0       	brcs	.+36     	; 0x61e <__fixunssfsi+0x2c>
 5fa:	b9 2f       	mov	r27, r25
 5fc:	99 27       	eor	r25, r25
 5fe:	b7 51       	subi	r27, 0x17	; 23
 600:	a0 f0       	brcs	.+40     	; 0x62a <__fixunssfsi+0x38>
 602:	d1 f0       	breq	.+52     	; 0x638 <__fixunssfsi+0x46>
 604:	66 0f       	add	r22, r22
 606:	77 1f       	adc	r23, r23
 608:	88 1f       	adc	r24, r24
 60a:	99 1f       	adc	r25, r25
 60c:	1a f0       	brmi	.+6      	; 0x614 <__fixunssfsi+0x22>
 60e:	ba 95       	dec	r27
 610:	c9 f7       	brne	.-14     	; 0x604 <__fixunssfsi+0x12>
 612:	12 c0       	rjmp	.+36     	; 0x638 <__fixunssfsi+0x46>
 614:	b1 30       	cpi	r27, 0x01	; 1
 616:	81 f0       	breq	.+32     	; 0x638 <__fixunssfsi+0x46>
 618:	77 d0       	rcall	.+238    	; 0x708 <__fp_zero>
 61a:	b1 e0       	ldi	r27, 0x01	; 1
 61c:	08 95       	ret
 61e:	74 c0       	rjmp	.+232    	; 0x708 <__fp_zero>
 620:	67 2f       	mov	r22, r23
 622:	78 2f       	mov	r23, r24
 624:	88 27       	eor	r24, r24
 626:	b8 5f       	subi	r27, 0xF8	; 248
 628:	39 f0       	breq	.+14     	; 0x638 <__fixunssfsi+0x46>
 62a:	b9 3f       	cpi	r27, 0xF9	; 249
 62c:	cc f3       	brlt	.-14     	; 0x620 <__fixunssfsi+0x2e>
 62e:	86 95       	lsr	r24
 630:	77 95       	ror	r23
 632:	67 95       	ror	r22
 634:	b3 95       	inc	r27
 636:	d9 f7       	brne	.-10     	; 0x62e <__fixunssfsi+0x3c>
 638:	3e f4       	brtc	.+14     	; 0x648 <__fixunssfsi+0x56>
 63a:	90 95       	com	r25
 63c:	80 95       	com	r24
 63e:	70 95       	com	r23
 640:	61 95       	neg	r22
 642:	7f 4f       	sbci	r23, 0xFF	; 255
 644:	8f 4f       	sbci	r24, 0xFF	; 255
 646:	9f 4f       	sbci	r25, 0xFF	; 255
 648:	08 95       	ret

0000064a <__floatunsisf>:
 64a:	e8 94       	clt
 64c:	09 c0       	rjmp	.+18     	; 0x660 <__floatsisf+0x12>

0000064e <__floatsisf>:
 64e:	97 fb       	bst	r25, 7
 650:	3e f4       	brtc	.+14     	; 0x660 <__floatsisf+0x12>
 652:	90 95       	com	r25
 654:	80 95       	com	r24
 656:	70 95       	com	r23
 658:	61 95       	neg	r22
 65a:	7f 4f       	sbci	r23, 0xFF	; 255
 65c:	8f 4f       	sbci	r24, 0xFF	; 255
 65e:	9f 4f       	sbci	r25, 0xFF	; 255
 660:	99 23       	and	r25, r25
 662:	a9 f0       	breq	.+42     	; 0x68e <__floatsisf+0x40>
 664:	f9 2f       	mov	r31, r25
 666:	96 e9       	ldi	r25, 0x96	; 150
 668:	bb 27       	eor	r27, r27
 66a:	93 95       	inc	r25
 66c:	f6 95       	lsr	r31
 66e:	87 95       	ror	r24
 670:	77 95       	ror	r23
 672:	67 95       	ror	r22
 674:	b7 95       	ror	r27
 676:	f1 11       	cpse	r31, r1
 678:	f8 cf       	rjmp	.-16     	; 0x66a <__floatsisf+0x1c>
 67a:	fa f4       	brpl	.+62     	; 0x6ba <__floatsisf+0x6c>
 67c:	bb 0f       	add	r27, r27
 67e:	11 f4       	brne	.+4      	; 0x684 <__floatsisf+0x36>
 680:	60 ff       	sbrs	r22, 0
 682:	1b c0       	rjmp	.+54     	; 0x6ba <__floatsisf+0x6c>
 684:	6f 5f       	subi	r22, 0xFF	; 255
 686:	7f 4f       	sbci	r23, 0xFF	; 255
 688:	8f 4f       	sbci	r24, 0xFF	; 255
 68a:	9f 4f       	sbci	r25, 0xFF	; 255
 68c:	16 c0       	rjmp	.+44     	; 0x6ba <__floatsisf+0x6c>
 68e:	88 23       	and	r24, r24
 690:	11 f0       	breq	.+4      	; 0x696 <__floatsisf+0x48>
 692:	96 e9       	ldi	r25, 0x96	; 150
 694:	11 c0       	rjmp	.+34     	; 0x6b8 <__floatsisf+0x6a>
 696:	77 23       	and	r23, r23
 698:	21 f0       	breq	.+8      	; 0x6a2 <__floatsisf+0x54>
 69a:	9e e8       	ldi	r25, 0x8E	; 142
 69c:	87 2f       	mov	r24, r23
 69e:	76 2f       	mov	r23, r22
 6a0:	05 c0       	rjmp	.+10     	; 0x6ac <__floatsisf+0x5e>
 6a2:	66 23       	and	r22, r22
 6a4:	71 f0       	breq	.+28     	; 0x6c2 <__floatsisf+0x74>
 6a6:	96 e8       	ldi	r25, 0x86	; 134
 6a8:	86 2f       	mov	r24, r22
 6aa:	70 e0       	ldi	r23, 0x00	; 0
 6ac:	60 e0       	ldi	r22, 0x00	; 0
 6ae:	2a f0       	brmi	.+10     	; 0x6ba <__floatsisf+0x6c>
 6b0:	9a 95       	dec	r25
 6b2:	66 0f       	add	r22, r22
 6b4:	77 1f       	adc	r23, r23
 6b6:	88 1f       	adc	r24, r24
 6b8:	da f7       	brpl	.-10     	; 0x6b0 <__floatsisf+0x62>
 6ba:	88 0f       	add	r24, r24
 6bc:	96 95       	lsr	r25
 6be:	87 95       	ror	r24
 6c0:	97 f9       	bld	r25, 7
 6c2:	08 95       	ret

000006c4 <__fp_split3>:
 6c4:	57 fd       	sbrc	r21, 7
 6c6:	90 58       	subi	r25, 0x80	; 128
 6c8:	44 0f       	add	r20, r20
 6ca:	55 1f       	adc	r21, r21
 6cc:	59 f0       	breq	.+22     	; 0x6e4 <__fp_splitA+0x10>
 6ce:	5f 3f       	cpi	r21, 0xFF	; 255
 6d0:	71 f0       	breq	.+28     	; 0x6ee <__fp_splitA+0x1a>
 6d2:	47 95       	ror	r20

000006d4 <__fp_splitA>:
 6d4:	88 0f       	add	r24, r24
 6d6:	97 fb       	bst	r25, 7
 6d8:	99 1f       	adc	r25, r25
 6da:	61 f0       	breq	.+24     	; 0x6f4 <__fp_splitA+0x20>
 6dc:	9f 3f       	cpi	r25, 0xFF	; 255
 6de:	79 f0       	breq	.+30     	; 0x6fe <__fp_splitA+0x2a>
 6e0:	87 95       	ror	r24
 6e2:	08 95       	ret
 6e4:	12 16       	cp	r1, r18
 6e6:	13 06       	cpc	r1, r19
 6e8:	14 06       	cpc	r1, r20
 6ea:	55 1f       	adc	r21, r21
 6ec:	f2 cf       	rjmp	.-28     	; 0x6d2 <__fp_split3+0xe>
 6ee:	46 95       	lsr	r20
 6f0:	f1 df       	rcall	.-30     	; 0x6d4 <__fp_splitA>
 6f2:	08 c0       	rjmp	.+16     	; 0x704 <__fp_splitA+0x30>
 6f4:	16 16       	cp	r1, r22
 6f6:	17 06       	cpc	r1, r23
 6f8:	18 06       	cpc	r1, r24
 6fa:	99 1f       	adc	r25, r25
 6fc:	f1 cf       	rjmp	.-30     	; 0x6e0 <__fp_splitA+0xc>
 6fe:	86 95       	lsr	r24
 700:	71 05       	cpc	r23, r1
 702:	61 05       	cpc	r22, r1
 704:	08 94       	sec
 706:	08 95       	ret

00000708 <__fp_zero>:
 708:	e8 94       	clt

0000070a <__fp_szero>:
 70a:	bb 27       	eor	r27, r27
 70c:	66 27       	eor	r22, r22
 70e:	77 27       	eor	r23, r23
 710:	cb 01       	movw	r24, r22
 712:	97 f9       	bld	r25, 7
 714:	08 95       	ret

00000716 <__mulsf3>:
 716:	0b d0       	rcall	.+22     	; 0x72e <__mulsf3x>
 718:	78 c0       	rjmp	.+240    	; 0x80a <__fp_round>
 71a:	69 d0       	rcall	.+210    	; 0x7ee <__fp_pscA>
 71c:	28 f0       	brcs	.+10     	; 0x728 <__mulsf3+0x12>
 71e:	6e d0       	rcall	.+220    	; 0x7fc <__fp_pscB>
 720:	18 f0       	brcs	.+6      	; 0x728 <__mulsf3+0x12>
 722:	95 23       	and	r25, r21
 724:	09 f0       	breq	.+2      	; 0x728 <__mulsf3+0x12>
 726:	5a c0       	rjmp	.+180    	; 0x7dc <__fp_inf>
 728:	5f c0       	rjmp	.+190    	; 0x7e8 <__fp_nan>
 72a:	11 24       	eor	r1, r1
 72c:	ee cf       	rjmp	.-36     	; 0x70a <__fp_szero>

0000072e <__mulsf3x>:
 72e:	ca df       	rcall	.-108    	; 0x6c4 <__fp_split3>
 730:	a0 f3       	brcs	.-24     	; 0x71a <__mulsf3+0x4>

00000732 <__mulsf3_pse>:
 732:	95 9f       	mul	r25, r21
 734:	d1 f3       	breq	.-12     	; 0x72a <__mulsf3+0x14>
 736:	95 0f       	add	r25, r21
 738:	50 e0       	ldi	r21, 0x00	; 0
 73a:	55 1f       	adc	r21, r21
 73c:	62 9f       	mul	r22, r18
 73e:	f0 01       	movw	r30, r0
 740:	72 9f       	mul	r23, r18
 742:	bb 27       	eor	r27, r27
 744:	f0 0d       	add	r31, r0
 746:	b1 1d       	adc	r27, r1
 748:	63 9f       	mul	r22, r19
 74a:	aa 27       	eor	r26, r26
 74c:	f0 0d       	add	r31, r0
 74e:	b1 1d       	adc	r27, r1
 750:	aa 1f       	adc	r26, r26
 752:	64 9f       	mul	r22, r20
 754:	66 27       	eor	r22, r22
 756:	b0 0d       	add	r27, r0
 758:	a1 1d       	adc	r26, r1
 75a:	66 1f       	adc	r22, r22
 75c:	82 9f       	mul	r24, r18
 75e:	22 27       	eor	r18, r18
 760:	b0 0d       	add	r27, r0
 762:	a1 1d       	adc	r26, r1
 764:	62 1f       	adc	r22, r18
 766:	73 9f       	mul	r23, r19
 768:	b0 0d       	add	r27, r0
 76a:	a1 1d       	adc	r26, r1
 76c:	62 1f       	adc	r22, r18
 76e:	83 9f       	mul	r24, r19
 770:	a0 0d       	add	r26, r0
 772:	61 1d       	adc	r22, r1
 774:	22 1f       	adc	r18, r18
 776:	74 9f       	mul	r23, r20
 778:	33 27       	eor	r19, r19
 77a:	a0 0d       	add	r26, r0
 77c:	61 1d       	adc	r22, r1
 77e:	23 1f       	adc	r18, r19
 780:	84 9f       	mul	r24, r20
 782:	60 0d       	add	r22, r0
 784:	21 1d       	adc	r18, r1
 786:	82 2f       	mov	r24, r18
 788:	76 2f       	mov	r23, r22
 78a:	6a 2f       	mov	r22, r26
 78c:	11 24       	eor	r1, r1
 78e:	9f 57       	subi	r25, 0x7F	; 127
 790:	50 40       	sbci	r21, 0x00	; 0
 792:	8a f0       	brmi	.+34     	; 0x7b6 <__mulsf3_pse+0x84>
 794:	e1 f0       	breq	.+56     	; 0x7ce <__mulsf3_pse+0x9c>
 796:	88 23       	and	r24, r24
 798:	4a f0       	brmi	.+18     	; 0x7ac <__mulsf3_pse+0x7a>
 79a:	ee 0f       	add	r30, r30
 79c:	ff 1f       	adc	r31, r31
 79e:	bb 1f       	adc	r27, r27
 7a0:	66 1f       	adc	r22, r22
 7a2:	77 1f       	adc	r23, r23
 7a4:	88 1f       	adc	r24, r24
 7a6:	91 50       	subi	r25, 0x01	; 1
 7a8:	50 40       	sbci	r21, 0x00	; 0
 7aa:	a9 f7       	brne	.-22     	; 0x796 <__mulsf3_pse+0x64>
 7ac:	9e 3f       	cpi	r25, 0xFE	; 254
 7ae:	51 05       	cpc	r21, r1
 7b0:	70 f0       	brcs	.+28     	; 0x7ce <__mulsf3_pse+0x9c>
 7b2:	14 c0       	rjmp	.+40     	; 0x7dc <__fp_inf>
 7b4:	aa cf       	rjmp	.-172    	; 0x70a <__fp_szero>
 7b6:	5f 3f       	cpi	r21, 0xFF	; 255
 7b8:	ec f3       	brlt	.-6      	; 0x7b4 <__mulsf3_pse+0x82>
 7ba:	98 3e       	cpi	r25, 0xE8	; 232
 7bc:	dc f3       	brlt	.-10     	; 0x7b4 <__mulsf3_pse+0x82>
 7be:	86 95       	lsr	r24
 7c0:	77 95       	ror	r23
 7c2:	67 95       	ror	r22
 7c4:	b7 95       	ror	r27
 7c6:	f7 95       	ror	r31
 7c8:	e7 95       	ror	r30
 7ca:	9f 5f       	subi	r25, 0xFF	; 255
 7cc:	c1 f7       	brne	.-16     	; 0x7be <__mulsf3_pse+0x8c>
 7ce:	fe 2b       	or	r31, r30
 7d0:	88 0f       	add	r24, r24
 7d2:	91 1d       	adc	r25, r1
 7d4:	96 95       	lsr	r25
 7d6:	87 95       	ror	r24
 7d8:	97 f9       	bld	r25, 7
 7da:	08 95       	ret

000007dc <__fp_inf>:
 7dc:	97 f9       	bld	r25, 7
 7de:	9f 67       	ori	r25, 0x7F	; 127
 7e0:	80 e8       	ldi	r24, 0x80	; 128
 7e2:	70 e0       	ldi	r23, 0x00	; 0
 7e4:	60 e0       	ldi	r22, 0x00	; 0
 7e6:	08 95       	ret

000007e8 <__fp_nan>:
 7e8:	9f ef       	ldi	r25, 0xFF	; 255
 7ea:	80 ec       	ldi	r24, 0xC0	; 192
 7ec:	08 95       	ret

000007ee <__fp_pscA>:
 7ee:	00 24       	eor	r0, r0
 7f0:	0a 94       	dec	r0
 7f2:	16 16       	cp	r1, r22
 7f4:	17 06       	cpc	r1, r23
 7f6:	18 06       	cpc	r1, r24
 7f8:	09 06       	cpc	r0, r25
 7fa:	08 95       	ret

000007fc <__fp_pscB>:
 7fc:	00 24       	eor	r0, r0
 7fe:	0a 94       	dec	r0
 800:	12 16       	cp	r1, r18
 802:	13 06       	cpc	r1, r19
 804:	14 06       	cpc	r1, r20
 806:	05 06       	cpc	r0, r21
 808:	08 95       	ret

0000080a <__fp_round>:
 80a:	09 2e       	mov	r0, r25
 80c:	03 94       	inc	r0
 80e:	00 0c       	add	r0, r0
 810:	11 f4       	brne	.+4      	; 0x816 <__fp_round+0xc>
 812:	88 23       	and	r24, r24
 814:	52 f0       	brmi	.+20     	; 0x82a <__fp_round+0x20>
 816:	bb 0f       	add	r27, r27
 818:	40 f4       	brcc	.+16     	; 0x82a <__fp_round+0x20>
 81a:	bf 2b       	or	r27, r31
 81c:	11 f4       	brne	.+4      	; 0x822 <__fp_round+0x18>
 81e:	60 ff       	sbrs	r22, 0
 820:	04 c0       	rjmp	.+8      	; 0x82a <__fp_round+0x20>
 822:	6f 5f       	subi	r22, 0xFF	; 255
 824:	7f 4f       	sbci	r23, 0xFF	; 255
 826:	8f 4f       	sbci	r24, 0xFF	; 255
 828:	9f 4f       	sbci	r25, 0xFF	; 255
 82a:	08 95       	ret

0000082c <__udivmodqi4>:
 82c:	99 1b       	sub	r25, r25
 82e:	79 e0       	ldi	r23, 0x09	; 9
 830:	04 c0       	rjmp	.+8      	; 0x83a <__udivmodqi4_ep>

00000832 <__udivmodqi4_loop>:
 832:	99 1f       	adc	r25, r25
 834:	96 17       	cp	r25, r22
 836:	08 f0       	brcs	.+2      	; 0x83a <__udivmodqi4_ep>
 838:	96 1b       	sub	r25, r22

0000083a <__udivmodqi4_ep>:
 83a:	88 1f       	adc	r24, r24
 83c:	7a 95       	dec	r23
 83e:	c9 f7       	brne	.-14     	; 0x832 <__udivmodqi4_loop>
 840:	80 95       	com	r24
 842:	08 95       	ret

00000844 <__udivmodhi4>:
 844:	aa 1b       	sub	r26, r26
 846:	bb 1b       	sub	r27, r27
 848:	51 e1       	ldi	r21, 0x11	; 17
 84a:	07 c0       	rjmp	.+14     	; 0x85a <__udivmodhi4_ep>

0000084c <__udivmodhi4_loop>:
 84c:	aa 1f       	adc	r26, r26
 84e:	bb 1f       	adc	r27, r27
 850:	a6 17       	cp	r26, r22
 852:	b7 07       	cpc	r27, r23
 854:	10 f0       	brcs	.+4      	; 0x85a <__udivmodhi4_ep>
 856:	a6 1b       	sub	r26, r22
 858:	b7 0b       	sbc	r27, r23

0000085a <__udivmodhi4_ep>:
 85a:	88 1f       	adc	r24, r24
 85c:	99 1f       	adc	r25, r25
 85e:	5a 95       	dec	r21
 860:	a9 f7       	brne	.-22     	; 0x84c <__udivmodhi4_loop>
 862:	80 95       	com	r24
 864:	90 95       	com	r25
 866:	bc 01       	movw	r22, r24
 868:	cd 01       	movw	r24, r26
 86a:	08 95       	ret

0000086c <_exit>:
 86c:	f8 94       	cli

0000086e <__stop_program>:
 86e:	ff cf       	rjmp	.-2      	; 0x86e <__stop_program>
