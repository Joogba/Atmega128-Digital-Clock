
timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000610  000006a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000610  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  00800124  00800124  000006c8  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001aa  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000366  00000000  00000000  00000892  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000013a  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ae  00000000  00000000  00000d32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  000011e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000194  00000000  00000000  00001290  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a0  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 3a 01 	jmp	0x274	; 0x274 <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e1       	ldi	r30, 0x10	; 16
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 32       	cpi	r26, 0x24	; 36
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a4 e2       	ldi	r26, 0x24	; 36
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 34       	cpi	r26, 0x4A	; 74
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 16 02 	call	0x42c	; 0x42c <main>
  c6:	0c 94 06 03 	jmp	0x60c	; 0x60c <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <port_init>:



void port_init(void)
{
 PORTA = 0x00;
  ce:	1b ba       	out	0x1b, r1	; 27
 DDRA  = 0xff;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	8a bb       	out	0x1a, r24	; 26
 
 PORTB = 0x00;
  d4:	18 ba       	out	0x18, r1	; 24
 DDRB  = 0x00;
  d6:	17 ba       	out	0x17, r1	; 23
 
 PORTC = 0x00; //m103 output only
  d8:	15 ba       	out	0x15, r1	; 21
 DDRC  = 0x03;
  da:	83 e0       	ldi	r24, 0x03	; 3
  dc:	84 bb       	out	0x14, r24	; 20
 
 PORTD = 0x00;
  de:	12 ba       	out	0x12, r1	; 18
 DDRD  = 0x00;
  e0:	11 ba       	out	0x11, r1	; 17
 
 PORTE = 0x00;
  e2:	13 b8       	out	0x03, r1	; 3
 DDRE  = 0x00;
  e4:	12 b8       	out	0x02, r1	; 2
 
 PORTF = 0x00;
  e6:	10 92 62 00 	sts	0x0062, r1
 DDRF  = 0x00;
  ea:	10 92 61 00 	sts	0x0061, r1
 
 PORTG = 0x00;
  ee:	10 92 65 00 	sts	0x0065, r1
 DDRG  = 0x03;
  f2:	80 93 64 00 	sts	0x0064, r24
}
  f6:	08 95       	ret

000000f8 <timer0_init>:

void timer0_init(void)
{ 	
	TCCR0 = 0x05;
  f8:	85 e0       	ldi	r24, 0x05	; 5
  fa:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0x00;
  fc:	12 be       	out	0x32, r1	; 50
	ASSR = 0x00;
  fe:	10 be       	out	0x30, r1	; 48
	TIMSK = 0x01;
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	87 bf       	out	0x37, r24	; 55
}
 104:	08 95       	ret

00000106 <SetTimeZero>:
//			누르면 각각 1부터4 자리수까지 숫자 올리기 1,3자리(0~5) 2,4자리(0~9) 
// 3번버튼	스탑워치
// 4번버튼	알람설정

void SetTimeZero(int *arr[4])
{
 106:	fc 01       	movw	r30, r24
	arr[0] = 0;
 108:	11 82       	std	Z+1, r1	; 0x01
 10a:	10 82       	st	Z, r1
	arr[1] = 0;
 10c:	13 82       	std	Z+3, r1	; 0x03
 10e:	12 82       	std	Z+2, r1	; 0x02
	arr[2] = 0;
 110:	15 82       	std	Z+5, r1	; 0x05
 112:	14 82       	std	Z+4, r1	; 0x04
	arr[3] = 0;
 114:	17 82       	std	Z+7, r1	; 0x07
 116:	16 82       	std	Z+6, r1	; 0x06
}
 118:	08 95       	ret

0000011a <TimeCopy>:

void TimeCopy(int* arr1, int* arr2)
{
 11a:	dc 01       	movw	r26, r24
 11c:	fb 01       	movw	r30, r22
	arr1[0] = arr2[0];
 11e:	80 81       	ld	r24, Z
 120:	91 81       	ldd	r25, Z+1	; 0x01
 122:	11 96       	adiw	r26, 0x01	; 1
 124:	9c 93       	st	X, r25
 126:	8e 93       	st	-X, r24
	arr1[1] = arr2[1];
 128:	82 81       	ldd	r24, Z+2	; 0x02
 12a:	93 81       	ldd	r25, Z+3	; 0x03
 12c:	13 96       	adiw	r26, 0x03	; 3
 12e:	9c 93       	st	X, r25
 130:	8e 93       	st	-X, r24
 132:	12 97       	sbiw	r26, 0x02	; 2
	arr1[2] = arr2[2];
 134:	84 81       	ldd	r24, Z+4	; 0x04
 136:	95 81       	ldd	r25, Z+5	; 0x05
 138:	15 96       	adiw	r26, 0x05	; 5
 13a:	9c 93       	st	X, r25
 13c:	8e 93       	st	-X, r24
 13e:	14 97       	sbiw	r26, 0x04	; 4
	arr1[3] = arr2[3];
 140:	86 81       	ldd	r24, Z+6	; 0x06
 142:	97 81       	ldd	r25, Z+7	; 0x07
 144:	17 96       	adiw	r26, 0x07	; 7
 146:	9c 93       	st	X, r25
 148:	8e 93       	st	-X, r24
 14a:	16 97       	sbiw	r26, 0x06	; 6
}
 14c:	08 95       	ret

0000014e <RunningTime>:

void RunningTime(int* arr, float *temp_time)
{		
 14e:	fc 01       	movw	r30, r24
	arr[3]++;
 150:	86 81       	ldd	r24, Z+6	; 0x06
 152:	97 81       	ldd	r25, Z+7	; 0x07
 154:	01 96       	adiw	r24, 0x01	; 1
 156:	97 83       	std	Z+7, r25	; 0x07
 158:	86 83       	std	Z+6, r24	; 0x06

	if (arr[3] > 9)
 15a:	0a 97       	sbiw	r24, 0x0a	; 10
 15c:	ec f0       	brlt	.+58     	; 0x198 <RunningTime+0x4a>
	{
		arr[3] = 0;
 15e:	17 82       	std	Z+7, r1	; 0x07
 160:	16 82       	std	Z+6, r1	; 0x06
		arr[2]++;
 162:	84 81       	ldd	r24, Z+4	; 0x04
 164:	95 81       	ldd	r25, Z+5	; 0x05
 166:	01 96       	adiw	r24, 0x01	; 1
 168:	95 83       	std	Z+5, r25	; 0x05
 16a:	84 83       	std	Z+4, r24	; 0x04
		if (arr[2] > 5)
 16c:	06 97       	sbiw	r24, 0x06	; 6
 16e:	a4 f0       	brlt	.+40     	; 0x198 <RunningTime+0x4a>
		{
			arr[2] = 0;
 170:	15 82       	std	Z+5, r1	; 0x05
 172:	14 82       	std	Z+4, r1	; 0x04
			arr[1]++;
 174:	82 81       	ldd	r24, Z+2	; 0x02
 176:	93 81       	ldd	r25, Z+3	; 0x03
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	93 83       	std	Z+3, r25	; 0x03
 17c:	82 83       	std	Z+2, r24	; 0x02
			if (arr[1] > 9)
 17e:	0a 97       	sbiw	r24, 0x0a	; 10
 180:	5c f0       	brlt	.+22     	; 0x198 <RunningTime+0x4a>
			{
				arr[1] = 0;
 182:	13 82       	std	Z+3, r1	; 0x03
 184:	12 82       	std	Z+2, r1	; 0x02
				arr[0]++;
 186:	80 81       	ld	r24, Z
 188:	91 81       	ldd	r25, Z+1	; 0x01
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	91 83       	std	Z+1, r25	; 0x01
 18e:	80 83       	st	Z, r24
				if (arr[0] > 5)
 190:	06 97       	sbiw	r24, 0x06	; 6
 192:	14 f0       	brlt	.+4      	; 0x198 <RunningTime+0x4a>
				arr[0] = 0;
 194:	11 82       	std	Z+1, r1	; 0x01
 196:	10 82       	st	Z, r1
 198:	08 95       	ret

0000019a <CompareTime>:
		}
	}
}

int CompareTime(int* arr1, int* arr2)
{
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	ec 01       	movw	r28, r24
 1a0:	40 e0       	ldi	r20, 0x00	; 0
 1a2:	50 e0       	ldi	r21, 0x00	; 0
	for (int i = 0; i < 4; i++)
	{
		if (arr1[i] != arr2[i])
 1a4:	fe 01       	movw	r30, r28
 1a6:	e4 0f       	add	r30, r20
 1a8:	f5 1f       	adc	r31, r21
 1aa:	db 01       	movw	r26, r22
 1ac:	a4 0f       	add	r26, r20
 1ae:	b5 1f       	adc	r27, r21
 1b0:	20 81       	ld	r18, Z
 1b2:	31 81       	ldd	r19, Z+1	; 0x01
 1b4:	8d 91       	ld	r24, X+
 1b6:	9c 91       	ld	r25, X
 1b8:	28 17       	cp	r18, r24
 1ba:	39 07       	cpc	r19, r25
 1bc:	19 f0       	breq	.+6      	; 0x1c4 <CompareTime+0x2a>
 1be:	20 e0       	ldi	r18, 0x00	; 0
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	07 c0       	rjmp	.+14     	; 0x1d2 <CompareTime+0x38>
 1c4:	4e 5f       	subi	r20, 0xFE	; 254
 1c6:	5f 4f       	sbci	r21, 0xFF	; 255
	}
}

int CompareTime(int* arr1, int* arr2)
{
	for (int i = 0; i < 4; i++)
 1c8:	48 30       	cpi	r20, 0x08	; 8
 1ca:	51 05       	cpc	r21, r1
 1cc:	59 f7       	brne	.-42     	; 0x1a4 <CompareTime+0xa>
 1ce:	21 e0       	ldi	r18, 0x01	; 1
 1d0:	30 e0       	ldi	r19, 0x00	; 0
	{
		if (arr1[i] != arr2[i])
		return 0;
	}
	return 1;
}
 1d2:	c9 01       	movw	r24, r18
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

000001da <PrintTime>:

void PrintTime(int* arr)
{
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	bc 01       	movw	r22, r24
	EX_SS_SEL=~(0x01);
 1e0:	43 e0       	ldi	r20, 0x03	; 3
 1e2:	50 e8       	ldi	r21, 0x80	; 128
 1e4:	8e ef       	ldi	r24, 0xFE	; 254
 1e6:	ea 01       	movw	r28, r20
 1e8:	88 83       	st	Y, r24
	EX_SS_DATA=segment_data[arr[0]];
 1ea:	a0 e0       	ldi	r26, 0x00	; 0
 1ec:	b1 e0       	ldi	r27, 0x01	; 1
 1ee:	eb 01       	movw	r28, r22
 1f0:	e8 81       	ld	r30, Y
 1f2:	f9 81       	ldd	r31, Y+1	; 0x01
 1f4:	ea 0f       	add	r30, r26
 1f6:	fb 1f       	adc	r31, r27
 1f8:	80 81       	ld	r24, Z
 1fa:	22 e0       	ldi	r18, 0x02	; 2
 1fc:	30 e8       	ldi	r19, 0x80	; 128
 1fe:	f9 01       	movw	r30, r18
 200:	80 83       	st	Z, r24
	
	EX_SS_SEL=~(0x02);
 202:	8d ef       	ldi	r24, 0xFD	; 253
 204:	ea 01       	movw	r28, r20
 206:	88 83       	st	Y, r24
	EX_SS_DATA=segment_data[arr[1]];
 208:	eb 01       	movw	r28, r22
 20a:	ea 81       	ldd	r30, Y+2	; 0x02
 20c:	fb 81       	ldd	r31, Y+3	; 0x03
 20e:	ea 0f       	add	r30, r26
 210:	fb 1f       	adc	r31, r27
 212:	80 81       	ld	r24, Z
 214:	f9 01       	movw	r30, r18
 216:	80 83       	st	Z, r24
	EX_SS_SEL=~(0x04);
 218:	8b ef       	ldi	r24, 0xFB	; 251
 21a:	ea 01       	movw	r28, r20
 21c:	88 83       	st	Y, r24
	EX_SS_DATA=segment_data[arr[2]];
 21e:	eb 01       	movw	r28, r22
 220:	ec 81       	ldd	r30, Y+4	; 0x04
 222:	fd 81       	ldd	r31, Y+5	; 0x05
 224:	ea 0f       	add	r30, r26
 226:	fb 1f       	adc	r31, r27
 228:	80 81       	ld	r24, Z
 22a:	f9 01       	movw	r30, r18
 22c:	80 83       	st	Z, r24
	EX_SS_SEL=~(0x08);
 22e:	87 ef       	ldi	r24, 0xF7	; 247
 230:	ea 01       	movw	r28, r20
 232:	88 83       	st	Y, r24
	EX_SS_DATA=segment_data[arr[3]];
 234:	fb 01       	movw	r30, r22
 236:	86 81       	ldd	r24, Z+6	; 0x06
 238:	97 81       	ldd	r25, Z+7	; 0x07
 23a:	a8 0f       	add	r26, r24
 23c:	b9 1f       	adc	r27, r25
 23e:	8c 91       	ld	r24, X
 240:	e9 01       	movw	r28, r18
 242:	88 83       	st	Y, r24
}
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	08 95       	ret

0000024a <init_devices>:

void init_devices(void)
{ 
	CLI();
 24a:	f8 94       	cli
	port_init();
 24c:	0e 94 67 00 	call	0xce	; 0xce <port_init>
 DDRG  = 0x03;
}

void timer0_init(void)
{ 	
	TCCR0 = 0x05;
 250:	85 e0       	ldi	r24, 0x05	; 5
 252:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0x00;
 254:	12 be       	out	0x32, r1	; 50
	ASSR = 0x00;
 256:	10 be       	out	0x30, r1	; 48
	TIMSK = 0x01;
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	87 bf       	out	0x37, r24	; 55
void init_devices(void)
{ 
	CLI();
	port_init();
	timer0_init();
	MCUCR = 0x80;
 25c:	80 e8       	ldi	r24, 0x80	; 128
 25e:	85 bf       	out	0x35, r24	; 53
	EX_SS_SEL = 0x0f; // 초기값으로 디지트 OFF
 260:	8f e0       	ldi	r24, 0x0F	; 15
 262:	80 93 03 80 	sts	0x8003, r24
	PORTB = 0x00;
 266:	18 ba       	out	0x18, r1	; 24
	DDRB = 0x00;
 268:	17 ba       	out	0x17, r1	; 23
    PORTD = 0xff; // PORTD 초기값 설정	
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	82 bb       	out	0x12, r24	; 18
	DDRD = 0xff; // PORTD  모두 출력으로 설정	 
 26e:	81 bb       	out	0x11, r24	; 17
	SEI();
 270:	78 94       	sei
}
 272:	08 95       	ret

00000274 <__vector_16>:

ISR(TIMER0_OVF_vect) // oc0 & ctc mode ? ISR(TIMER0_COMP_vect)
{ 
 274:	1f 92       	push	r1
 276:	0f 92       	push	r0
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	0f 92       	push	r0
 27c:	0b b6       	in	r0, 0x3b	; 59
 27e:	0f 92       	push	r0
 280:	11 24       	eor	r1, r1
 282:	2f 93       	push	r18
 284:	3f 93       	push	r19
 286:	4f 93       	push	r20
 288:	5f 93       	push	r21
 28a:	6f 93       	push	r22
 28c:	7f 93       	push	r23
 28e:	8f 93       	push	r24
 290:	9f 93       	push	r25
 292:	af 93       	push	r26
 294:	bf 93       	push	r27
 296:	ef 93       	push	r30
 298:	ff 93       	push	r31
	TCNT0 = 0x00; //reload counter value
 29a:	12 be       	out	0x32, r1	; 50
	
	printDigit++;
	printDigit = printDigit %4;
 29c:	80 91 44 01 	lds	r24, 0x0144
 2a0:	90 91 45 01 	lds	r25, 0x0145
 2a4:	01 96       	adiw	r24, 0x01	; 1
 2a6:	64 e0       	ldi	r22, 0x04	; 4
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	0e 94 df 02 	call	0x5be	; 0x5be <__divmodhi4>
 2ae:	90 93 45 01 	sts	0x0145, r25
 2b2:	80 93 44 01 	sts	0x0144, r24
	
	count_int++;
 2b6:	80 91 46 01 	lds	r24, 0x0146
 2ba:	90 91 47 01 	lds	r25, 0x0147
 2be:	01 96       	adiw	r24, 0x01	; 1
 2c0:	90 93 47 01 	sts	0x0147, r25
 2c4:	80 93 46 01 	sts	0x0146, r24
	if(count_int == 488) 
 2c8:	88 5e       	subi	r24, 0xE8	; 232
 2ca:	91 40       	sbci	r25, 0x01	; 1
 2cc:	09 f0       	breq	.+2      	; 0x2d0 <__vector_16+0x5c>
 2ce:	47 c0       	rjmp	.+142    	; 0x35e <__vector_16+0xea>
	{	
		switch (state) // 변수값 변경부
 2d0:	80 91 42 01 	lds	r24, 0x0142
 2d4:	90 91 43 01 	lds	r25, 0x0143
 2d8:	82 30       	cpi	r24, 0x02	; 2
 2da:	91 05       	cpc	r25, r1
 2dc:	39 f1       	breq	.+78     	; 0x32c <__vector_16+0xb8>
 2de:	83 30       	cpi	r24, 0x03	; 3
 2e0:	91 05       	cpc	r25, r1
 2e2:	99 f1       	breq	.+102    	; 0x34a <__vector_16+0xd6>
 2e4:	89 2b       	or	r24, r25
 2e6:	b9 f5       	brne	.+110    	; 0x356 <__vector_16+0xe2>
		{			
			case 0: // 현재시간
				RunningTime(cur_time_arr ,&temp_time);
 2e8:	8b e0       	ldi	r24, 0x0B	; 11
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	64 e2       	ldi	r22, 0x24	; 36
 2ee:	71 e0       	ldi	r23, 0x01	; 1
 2f0:	0e 94 a7 00 	call	0x14e	; 0x14e <RunningTime>
				
				if (alram_state == 1 && alram_count < 5) // 열번 깜빡이고 끝
 2f4:	80 91 3a 01 	lds	r24, 0x013A
 2f8:	90 91 3b 01 	lds	r25, 0x013B
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	69 f4       	brne	.+26     	; 0x31a <__vector_16+0xa6>
 300:	80 91 38 01 	lds	r24, 0x0138
 304:	90 91 39 01 	lds	r25, 0x0139
 308:	85 30       	cpi	r24, 0x05	; 5
 30a:	91 05       	cpc	r25, r1
 30c:	34 f4       	brge	.+12     	; 0x31a <__vector_16+0xa6>
				{					
					alram_count++;					
 30e:	01 96       	adiw	r24, 0x01	; 1
 310:	90 93 39 01 	sts	0x0139, r25
 314:	80 93 38 01 	sts	0x0138, r24
 318:	1e c0       	rjmp	.+60     	; 0x356 <__vector_16+0xe2>
				}
				else
				{
					alram_state = 0; alram_count = 0;
 31a:	10 92 3b 01 	sts	0x013B, r1
 31e:	10 92 3a 01 	sts	0x013A, r1
 322:	10 92 39 01 	sts	0x0139, r1
 326:	10 92 38 01 	sts	0x0138, r1
 32a:	15 c0       	rjmp	.+42     	; 0x356 <__vector_16+0xe2>
				}
				break;
			case 1: // 시간조절
				break;
			case 2: // 스탑워치
				RunningTime(cur_time_arr,&temp_time);
 32c:	8b e0       	ldi	r24, 0x0B	; 11
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	64 e2       	ldi	r22, 0x24	; 36
 332:	71 e0       	ldi	r23, 0x01	; 1
 334:	0e 94 a7 00 	call	0x14e	; 0x14e <RunningTime>
								
				if(stopwatch_stop == 0) 
 338:	80 91 40 01 	lds	r24, 0x0140
 33c:	90 91 41 01 	lds	r25, 0x0141
 340:	89 2b       	or	r24, r25
 342:	49 f4       	brne	.+18     	; 0x356 <__vector_16+0xe2>
					RunningTime(stop_time_arr,&temp_time);
 344:	88 e2       	ldi	r24, 0x28	; 40
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	02 c0       	rjmp	.+4      	; 0x34e <__vector_16+0xda>
								
					
				break;
			case 3: // 알람
				// 키입력으로 시간
				RunningTime(cur_time_arr,&temp_time);
 34a:	8b e0       	ldi	r24, 0x0B	; 11
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	64 e2       	ldi	r22, 0x24	; 36
 350:	71 e0       	ldi	r23, 0x01	; 1
 352:	0e 94 a7 00 	call	0x14e	; 0x14e <RunningTime>
				
				break;
		};
		count_int = 0;
 356:	10 92 47 01 	sts	0x0147, r1
 35a:	10 92 46 01 	sts	0x0146, r1
	}
	
	switch (state) // 출력부
 35e:	80 91 42 01 	lds	r24, 0x0142
 362:	90 91 43 01 	lds	r25, 0x0143
 366:	81 30       	cpi	r24, 0x01	; 1
 368:	91 05       	cpc	r25, r1
 36a:	11 f1       	breq	.+68     	; 0x3b0 <__vector_16+0x13c>
 36c:	82 30       	cpi	r24, 0x02	; 2
 36e:	91 05       	cpc	r25, r1
 370:	1c f4       	brge	.+6      	; 0x378 <__vector_16+0x104>
 372:	89 2b       	or	r24, r25
 374:	39 f0       	breq	.+14     	; 0x384 <__vector_16+0x110>
 376:	2c c0       	rjmp	.+88     	; 0x3d0 <__vector_16+0x15c>
 378:	82 30       	cpi	r24, 0x02	; 2
 37a:	91 05       	cpc	r25, r1
 37c:	f1 f0       	breq	.+60     	; 0x3ba <__vector_16+0x146>
 37e:	03 97       	sbiw	r24, 0x03	; 3
 380:	39 f5       	brne	.+78     	; 0x3d0 <__vector_16+0x15c>
 382:	20 c0       	rjmp	.+64     	; 0x3c4 <__vector_16+0x150>
		{			
			case 0: // 현재시간
				TimeCopy(print_arr, cur_time_arr);
 384:	80 e3       	ldi	r24, 0x30	; 48
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	6b e0       	ldi	r22, 0x0B	; 11
 38a:	71 e0       	ldi	r23, 0x01	; 1
 38c:	0e 94 8d 00 	call	0x11a	; 0x11a <TimeCopy>
				//PrintTime(cur_time_arr);
				
				if (alram_state == 1 && alram_count < 10) // 열번 깜빡이고 끝
 390:	80 91 3a 01 	lds	r24, 0x013A
 394:	90 91 3b 01 	lds	r25, 0x013B
 398:	01 97       	sbiw	r24, 0x01	; 1
 39a:	51 f4       	brne	.+20     	; 0x3b0 <__vector_16+0x13c>
 39c:	80 91 38 01 	lds	r24, 0x0138
 3a0:	90 91 39 01 	lds	r25, 0x0139
 3a4:	0a 97       	sbiw	r24, 0x0a	; 10
 3a6:	24 f4       	brge	.+8      	; 0x3b0 <__vector_16+0x13c>
				{
					PrintTime(blank_arr);				
 3a8:	8b e1       	ldi	r24, 0x1B	; 27
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	0e 94 ed 00 	call	0x1da	; 0x1da <PrintTime>
				}
				//break;
			case 1: // 시간조절
				TimeCopy(print_arr, cur_time_arr);
 3b0:	80 e3       	ldi	r24, 0x30	; 48
 3b2:	91 e0       	ldi	r25, 0x01	; 1
 3b4:	6b e0       	ldi	r22, 0x0B	; 11
 3b6:	71 e0       	ldi	r23, 0x01	; 1
 3b8:	09 c0       	rjmp	.+18     	; 0x3cc <__vector_16+0x158>
				//PrintTime(cur_time_arr);
				break;
			case 2: // 스탑워치
				//PrintTime(stop_time_arr);
				TimeCopy(print_arr, stop_time_arr);
 3ba:	80 e3       	ldi	r24, 0x30	; 48
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	68 e2       	ldi	r22, 0x28	; 40
 3c0:	71 e0       	ldi	r23, 0x01	; 1
 3c2:	04 c0       	rjmp	.+8      	; 0x3cc <__vector_16+0x158>
					
				break;
			case 3: // 알람
				// 키입력으로 시간
				//PrintTime(alram_time_arr);
				TimeCopy(print_arr, alram_time_arr);
 3c4:	80 e3       	ldi	r24, 0x30	; 48
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	63 e1       	ldi	r22, 0x13	; 19
 3ca:	71 e0       	ldi	r23, 0x01	; 1
 3cc:	0e 94 8d 00 	call	0x11a	; 0x11a <TimeCopy>
				break;
		};
		
	EX_SS_DATA =
 3d0:	20 91 44 01 	lds	r18, 0x0144
 3d4:	30 91 45 01 	lds	r19, 0x0145
 3d8:	f9 01       	movw	r30, r18
 3da:	ee 0f       	add	r30, r30
 3dc:	ff 1f       	adc	r31, r31
 3de:	e0 5d       	subi	r30, 0xD0	; 208
 3e0:	fe 4f       	sbci	r31, 0xFE	; 254
 3e2:	01 90       	ld	r0, Z+
 3e4:	f0 81       	ld	r31, Z
 3e6:	e0 2d       	mov	r30, r0
 3e8:	e0 50       	subi	r30, 0x00	; 0
 3ea:	ff 4f       	sbci	r31, 0xFF	; 255
 3ec:	80 81       	ld	r24, Z
 3ee:	80 93 02 80 	sts	0x8002, r24
	segment_data[print_arr[printDigit]];
	EX_SS_SEL = ~(0x01 << printDigit);
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <__vector_16+0x188>
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	2a 95       	dec	r18
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <__vector_16+0x184>
 400:	80 95       	com	r24
 402:	80 93 03 80 	sts	0x8003, r24
}
 406:	ff 91       	pop	r31
 408:	ef 91       	pop	r30
 40a:	bf 91       	pop	r27
 40c:	af 91       	pop	r26
 40e:	9f 91       	pop	r25
 410:	8f 91       	pop	r24
 412:	7f 91       	pop	r23
 414:	6f 91       	pop	r22
 416:	5f 91       	pop	r21
 418:	4f 91       	pop	r20
 41a:	3f 91       	pop	r19
 41c:	2f 91       	pop	r18
 41e:	0f 90       	pop	r0
 420:	0b be       	out	0x3b, r0	; 59
 422:	0f 90       	pop	r0
 424:	0f be       	out	0x3f, r0	; 63
 426:	0f 90       	pop	r0
 428:	1f 90       	pop	r1
 42a:	18 95       	reti

0000042c <main>:


int main(void)
{
 42c:	cf 92       	push	r12
 42e:	df 92       	push	r13
 430:	ef 92       	push	r14
 432:	ff 92       	push	r15
 434:	0f 93       	push	r16
 436:	1f 93       	push	r17
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
    
	init_devices();	
 43c:	0e 94 25 01 	call	0x24a	; 0x24a <init_devices>
					
					
					
			else if (keydata == 0x08) 
			{
				state = 3;// 알람설정
 440:	73 e0       	ldi	r23, 0x03	; 3
 442:	c7 2e       	mov	r12, r23
 444:	d1 2c       	mov	r13, r1
				SetTimeZero(stop_time_arr);
				
				
			}
			else if(key_old == 0x04 && keydata == 0x10 && stopwatch_stop == 0)	// 시간 가고있으면 멈춤				
					stopwatch_stop = 1;
 446:	01 e0       	ldi	r16, 0x01	; 1
 448:	10 e0       	ldi	r17, 0x00	; 0
			
			
			
			else if (keydata == 0x04) 
			{
				state = 2; // 스탑워치
 44a:	62 e0       	ldi	r22, 0x02	; 2
 44c:	e6 2e       	mov	r14, r22
 44e:	f1 2c       	mov	r15, r1
	
	
		
	while (1)
	{		
		keydata = PINB & 0xff;
 450:	86 b3       	in	r24, 0x16	; 22
 452:	80 93 49 01 	sts	0x0149, r24
		if (keydata != key_old)
 456:	90 91 48 01 	lds	r25, 0x0148
 45a:	89 17       	cp	r24, r25
 45c:	09 f4       	brne	.+2      	; 0x460 <main+0x34>
 45e:	9d c0       	rjmp	.+314    	; 0x59a <main+0x16e>
		{
			if (keydata == 0x01) state = 0;  // 현재시간
 460:	81 30       	cpi	r24, 0x01	; 1
 462:	29 f4       	brne	.+10     	; 0x46e <main+0x42>
 464:	10 92 43 01 	sts	0x0143, r1
 468:	10 92 42 01 	sts	0x0142, r1
 46c:	96 c0       	rjmp	.+300    	; 0x59a <main+0x16e>
			
			
			else if (keydata == 0x02) // 시간조절
 46e:	82 30       	cpi	r24, 0x02	; 2
 470:	29 f4       	brne	.+10     	; 0x47c <main+0x50>
			{
				state = 1; 
 472:	10 93 43 01 	sts	0x0143, r17
 476:	00 93 42 01 	sts	0x0142, r16
 47a:	4e c0       	rjmp	.+156    	; 0x518 <main+0xec>
				setDigitCount = 0;
				setNumCount = 0; 
				
				
			}
			else if(key_old == 0x02 && keydata == 0x10)  //자리수변경
 47c:	92 30       	cpi	r25, 0x02	; 2
 47e:	f1 f4       	brne	.+60     	; 0x4bc <main+0x90>
 480:	80 31       	cpi	r24, 0x10	; 16
 482:	09 f4       	brne	.+2      	; 0x486 <main+0x5a>
 484:	56 c0       	rjmp	.+172    	; 0x532 <main+0x106>
			{
					setDigitCount++;
					setDigitCount %= 4;
			}
			else if(key_old == 0x02 && keydata == 0x20) // 
 486:	80 32       	cpi	r24, 0x20	; 32
 488:	c9 f4       	brne	.+50     	; 0x4bc <main+0x90>
			{					
					cur_time_arr[setDigitCount]++;
 48a:	e0 91 3c 01 	lds	r30, 0x013C
 48e:	f0 91 3d 01 	lds	r31, 0x013D
 492:	ef 01       	movw	r28, r30
 494:	cc 0f       	add	r28, r28
 496:	dd 1f       	adc	r29, r29
 498:	c5 5f       	subi	r28, 0xF5	; 245
 49a:	de 4f       	sbci	r29, 0xFE	; 254
 49c:	88 81       	ld	r24, Y
 49e:	99 81       	ldd	r25, Y+1	; 0x01
 4a0:	01 96       	adiw	r24, 0x01	; 1
 4a2:	99 83       	std	Y+1, r25	; 0x01
 4a4:	88 83       	st	Y, r24
					if(setDigitCount == 0 || setDigitCount == 2)
 4a6:	30 97       	sbiw	r30, 0x00	; 0
 4a8:	21 f0       	breq	.+8      	; 0x4b2 <main+0x86>
 4aa:	e2 30       	cpi	r30, 0x02	; 2
 4ac:	f1 05       	cpc	r31, r1
 4ae:	09 f0       	breq	.+2      	; 0x4b2 <main+0x86>
 4b0:	6e c0       	rjmp	.+220    	; 0x58e <main+0x162>
						cur_time_arr[setDigitCount] %= 6;
 4b2:	ee 0f       	add	r30, r30
 4b4:	ff 1f       	adc	r31, r31
 4b6:	e5 5f       	subi	r30, 0xF5	; 245
 4b8:	fe 4f       	sbci	r31, 0xFE	; 254
 4ba:	62 c0       	rjmp	.+196    	; 0x580 <main+0x154>
						cur_time_arr[setDigitCount] %= 10;
			}
			
			
			
			else if (keydata == 0x04) 
 4bc:	84 30       	cpi	r24, 0x04	; 4
 4be:	49 f4       	brne	.+18     	; 0x4d2 <main+0xa6>
			{
				state = 2; // 스탑워치
 4c0:	f0 92 43 01 	sts	0x0143, r15
 4c4:	e0 92 42 01 	sts	0x0142, r14
				SetTimeZero(stop_time_arr);
 4c8:	88 e2       	ldi	r24, 0x28	; 40
 4ca:	91 e0       	ldi	r25, 0x01	; 1
 4cc:	0e 94 83 00 	call	0x106	; 0x106 <SetTimeZero>
 4d0:	64 c0       	rjmp	.+200    	; 0x59a <main+0x16e>
				
				
			}
			else if(key_old == 0x04 && keydata == 0x10 && stopwatch_stop == 0)	// 시간 가고있으면 멈춤				
 4d2:	94 30       	cpi	r25, 0x04	; 4
 4d4:	a9 f4       	brne	.+42     	; 0x500 <main+0xd4>
 4d6:	80 31       	cpi	r24, 0x10	; 16
 4d8:	99 f4       	brne	.+38     	; 0x500 <main+0xd4>
 4da:	80 91 40 01 	lds	r24, 0x0140
 4de:	90 91 41 01 	lds	r25, 0x0141
 4e2:	00 97       	sbiw	r24, 0x00	; 0
 4e4:	29 f4       	brne	.+10     	; 0x4f0 <main+0xc4>
					stopwatch_stop = 1;
 4e6:	10 93 41 01 	sts	0x0141, r17
 4ea:	00 93 40 01 	sts	0x0140, r16
 4ee:	55 c0       	rjmp	.+170    	; 0x59a <main+0x16e>
			else if(key_old == 0x04 && keydata == 0x10 && stopwatch_stop == 1) // 안가고있으면 다시 흐름
 4f0:	01 97       	sbiw	r24, 0x01	; 1
 4f2:	09 f0       	breq	.+2      	; 0x4f6 <main+0xca>
 4f4:	52 c0       	rjmp	.+164    	; 0x59a <main+0x16e>
					stopwatch_stop = 0;
 4f6:	10 92 41 01 	sts	0x0141, r1
 4fa:	10 92 40 01 	sts	0x0140, r1
 4fe:	4d c0       	rjmp	.+154    	; 0x59a <main+0x16e>
					
					
					
			else if (keydata == 0x08) 
 500:	88 30       	cpi	r24, 0x08	; 8
 502:	99 f4       	brne	.+38     	; 0x52a <main+0xfe>
			{
				state = 3;// 알람설정
 504:	d0 92 43 01 	sts	0x0143, r13
 508:	c0 92 42 01 	sts	0x0142, r12
				TimeCopy(alram_time_arr, cur_time_arr);
 50c:	83 e1       	ldi	r24, 0x13	; 19
 50e:	91 e0       	ldi	r25, 0x01	; 1
 510:	6b e0       	ldi	r22, 0x0B	; 11
 512:	71 e0       	ldi	r23, 0x01	; 1
 514:	0e 94 8d 00 	call	0x11a	; 0x11a <TimeCopy>
				setDigitCount = 0;
 518:	10 92 3d 01 	sts	0x013D, r1
 51c:	10 92 3c 01 	sts	0x013C, r1
				setNumCount = 0;
 520:	10 92 3f 01 	sts	0x013F, r1
 524:	10 92 3e 01 	sts	0x013E, r1
 528:	38 c0       	rjmp	.+112    	; 0x59a <main+0x16e>
				
				
				
			}
			else if(key_old == 0x08 && keydata == 0x10)  //자리수변경
 52a:	98 30       	cpi	r25, 0x08	; 8
 52c:	b1 f5       	brne	.+108    	; 0x59a <main+0x16e>
 52e:	80 31       	cpi	r24, 0x10	; 16
 530:	71 f4       	brne	.+28     	; 0x54e <main+0x122>
				{
					setDigitCount++;
 532:	80 91 3c 01 	lds	r24, 0x013C
 536:	90 91 3d 01 	lds	r25, 0x013D
					setDigitCount %= 4;
 53a:	01 96       	adiw	r24, 0x01	; 1
 53c:	64 e0       	ldi	r22, 0x04	; 4
 53e:	70 e0       	ldi	r23, 0x00	; 0
 540:	0e 94 df 02 	call	0x5be	; 0x5be <__divmodhi4>
 544:	90 93 3d 01 	sts	0x013D, r25
 548:	80 93 3c 01 	sts	0x013C, r24
 54c:	26 c0       	rjmp	.+76     	; 0x59a <main+0x16e>
				}
				else if(key_old == 0x08 && keydata == 0x20) // 숫자 변경
 54e:	80 32       	cpi	r24, 0x20	; 32
 550:	21 f5       	brne	.+72     	; 0x59a <main+0x16e>
				{
					alram_time_arr[setDigitCount]++;
 552:	e0 91 3c 01 	lds	r30, 0x013C
 556:	f0 91 3d 01 	lds	r31, 0x013D
 55a:	ef 01       	movw	r28, r30
 55c:	cc 0f       	add	r28, r28
 55e:	dd 1f       	adc	r29, r29
 560:	cd 5e       	subi	r28, 0xED	; 237
 562:	de 4f       	sbci	r29, 0xFE	; 254
 564:	88 81       	ld	r24, Y
 566:	99 81       	ldd	r25, Y+1	; 0x01
 568:	01 96       	adiw	r24, 0x01	; 1
 56a:	99 83       	std	Y+1, r25	; 0x01
 56c:	88 83       	st	Y, r24
					if(setDigitCount == 0 || setDigitCount == 2)
 56e:	30 97       	sbiw	r30, 0x00	; 0
 570:	19 f0       	breq	.+6      	; 0x578 <main+0x14c>
 572:	e2 30       	cpi	r30, 0x02	; 2
 574:	f1 05       	cpc	r31, r1
 576:	59 f4       	brne	.+22     	; 0x58e <main+0x162>
					alram_time_arr[setDigitCount] %= 6;
 578:	ee 0f       	add	r30, r30
 57a:	ff 1f       	adc	r31, r31
 57c:	ed 5e       	subi	r30, 0xED	; 237
 57e:	fe 4f       	sbci	r31, 0xFE	; 254
 580:	66 e0       	ldi	r22, 0x06	; 6
 582:	70 e0       	ldi	r23, 0x00	; 0
 584:	0e 94 df 02 	call	0x5be	; 0x5be <__divmodhi4>
 588:	91 83       	std	Z+1, r25	; 0x01
 58a:	80 83       	st	Z, r24
 58c:	06 c0       	rjmp	.+12     	; 0x59a <main+0x16e>
					else
					alram_time_arr[setDigitCount] %= 10;
 58e:	6a e0       	ldi	r22, 0x0A	; 10
 590:	70 e0       	ldi	r23, 0x00	; 0
 592:	0e 94 df 02 	call	0x5be	; 0x5be <__divmodhi4>
 596:	99 83       	std	Y+1, r25	; 0x01
 598:	88 83       	st	Y, r24
				}
			
		}
		
		if (CompareTime(cur_time_arr, alram_time_arr) == 1) // 알람 on
 59a:	8b e0       	ldi	r24, 0x0B	; 11
 59c:	91 e0       	ldi	r25, 0x01	; 1
 59e:	63 e1       	ldi	r22, 0x13	; 19
 5a0:	71 e0       	ldi	r23, 0x01	; 1
 5a2:	0e 94 cd 00 	call	0x19a	; 0x19a <CompareTime>
 5a6:	81 30       	cpi	r24, 0x01	; 1
 5a8:	91 05       	cpc	r25, r1
 5aa:	21 f4       	brne	.+8      	; 0x5b4 <main+0x188>
			alram_state = 1;
 5ac:	90 93 3b 01 	sts	0x013B, r25
 5b0:	80 93 3a 01 	sts	0x013A, r24
		
		
		
		
		key_old = keydata;
 5b4:	80 91 49 01 	lds	r24, 0x0149
 5b8:	80 93 48 01 	sts	0x0148, r24
 5bc:	49 cf       	rjmp	.-366    	; 0x450 <main+0x24>

000005be <__divmodhi4>:
 5be:	97 fb       	bst	r25, 7
 5c0:	09 2e       	mov	r0, r25
 5c2:	07 26       	eor	r0, r23
 5c4:	0a d0       	rcall	.+20     	; 0x5da <__divmodhi4_neg1>
 5c6:	77 fd       	sbrc	r23, 7
 5c8:	04 d0       	rcall	.+8      	; 0x5d2 <__divmodhi4_neg2>
 5ca:	0c d0       	rcall	.+24     	; 0x5e4 <__udivmodhi4>
 5cc:	06 d0       	rcall	.+12     	; 0x5da <__divmodhi4_neg1>
 5ce:	00 20       	and	r0, r0
 5d0:	1a f4       	brpl	.+6      	; 0x5d8 <__divmodhi4_exit>

000005d2 <__divmodhi4_neg2>:
 5d2:	70 95       	com	r23
 5d4:	61 95       	neg	r22
 5d6:	7f 4f       	sbci	r23, 0xFF	; 255

000005d8 <__divmodhi4_exit>:
 5d8:	08 95       	ret

000005da <__divmodhi4_neg1>:
 5da:	f6 f7       	brtc	.-4      	; 0x5d8 <__divmodhi4_exit>
 5dc:	90 95       	com	r25
 5de:	81 95       	neg	r24
 5e0:	9f 4f       	sbci	r25, 0xFF	; 255
 5e2:	08 95       	ret

000005e4 <__udivmodhi4>:
 5e4:	aa 1b       	sub	r26, r26
 5e6:	bb 1b       	sub	r27, r27
 5e8:	51 e1       	ldi	r21, 0x11	; 17
 5ea:	07 c0       	rjmp	.+14     	; 0x5fa <__udivmodhi4_ep>

000005ec <__udivmodhi4_loop>:
 5ec:	aa 1f       	adc	r26, r26
 5ee:	bb 1f       	adc	r27, r27
 5f0:	a6 17       	cp	r26, r22
 5f2:	b7 07       	cpc	r27, r23
 5f4:	10 f0       	brcs	.+4      	; 0x5fa <__udivmodhi4_ep>
 5f6:	a6 1b       	sub	r26, r22
 5f8:	b7 0b       	sbc	r27, r23

000005fa <__udivmodhi4_ep>:
 5fa:	88 1f       	adc	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	5a 95       	dec	r21
 600:	a9 f7       	brne	.-22     	; 0x5ec <__udivmodhi4_loop>
 602:	80 95       	com	r24
 604:	90 95       	com	r25
 606:	bc 01       	movw	r22, r24
 608:	cd 01       	movw	r24, r26
 60a:	08 95       	ret

0000060c <_exit>:
 60c:	f8 94       	cli

0000060e <__stop_program>:
 60e:	ff cf       	rjmp	.-2      	; 0x60e <__stop_program>
